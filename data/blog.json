{
	"settings": {
		"url": "https:\/\/sraban.github.io",
		"title": "<\/> FullStack Developer",
		"tagline": "Sraban Pahadasingh @Full Stack Developer: PHP, CodeIgniter, LARAVEL, ANGULAR 6-7-8, React Js, Ionic.",
		"author": "Sraban Pahadasingh",
		"layout": "default",
		"theme": "united.min.css",
		"disqus": "",
		"analytics": "",
		"only_titles": ""
	},
	"customValues": [
		{
			"title": "AI",
			"value": "<div class=\"panel-body\">\r\n\r\n<a target=\"_blank\" href=\"https:\/\/sraban.github.io\/gpt\">Notes<\/a>\r\n\r\n\r\n<\/div>\t",
			"id": 1719064648
		}
	],
	"pages": [
		{
			"title": "About",
			"body": "<p>Hello, I am Sraban Kumar, a full stack developer arround 13+ years of expereince on web and hybrid application development. Basically I have worked in E-commerce and Travel Domain using PHP and Javascript Frameworks.<\/p>",
			"slug": "about"
		},
		{
			"title": "Contact",
			"body": "<p>To get in touch, Twitter or Email is best (depending on the length of the message). I\u2019m also on LinkedIn.<\/p>",
			"slug": "contact"
		}
	],
	"follow": {
		"twitter": "https:\/\/twitter.com\/srabann",
		"linkedin": "https:\/\/www.linkedin.com\/in\/sraban\/",
		"google": "",
		"facebook": "https:\/\/www.facebook.com\/spahadasingh",
		"github": "https:\/\/github.com\/sraban"
	},
	"posts": [
		{
			"author": "Sraban Pahadasingh",
			"title": "Angular Perfomane Optimisation",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>List of performance optimization steps for Angular applications<\/p>\n<h3>1. <strong>Event Coalescing<\/strong>: <code>{ngZoneEventCoalescing: true}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Aggregates multiple events into a single change detection run.<\/li>\n<li><strong>Benefits<\/strong>: Reduces the number of change detection cycles.<\/li>\n<\/ul>\n<h3>2. <strong>Zone.js Optimization<\/strong>: <code>{ngZone: 'noop'}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Disables Zone.js to manage change detection manually.<\/li>\n<li><strong>Benefits<\/strong>: Provides fine-grained control over change detection, reducing unnecessary cycles.<\/li>\n<\/ul>\n<h3>3. <strong>OnPush Change Detection<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Changes the default change detection strategy to <code>OnPush<\/code>, which only checks for changes when input properties change.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Limits change detection to specific component updates, improving performance.<\/p>\n<pre><code class=\"language-typescript\">@Component({\n  selector: 'app-my-component',\n  templateUrl: '.\/my-component.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>4. <strong>Track By Function in ngFor<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses a <code>trackBy<\/code> function in <code>ngFor<\/code> to identify items in a collection by a unique identifier.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Minimizes DOM re-renders by tracking changes more efficiently.<\/p>\n<pre><code class=\"language-html\">&lt;div *ngFor=\"let item of items; trackBy: trackByFn\"&gt;\n  {{item.name}}\n&lt;\/div&gt;<\/code><\/pre>\n<pre><code class=\"language-typescript\">trackByFn(index: number, item: any): number {\n  return item.id; \/\/ unique id corresponding to item\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>5. <strong>Lazy Loading Modules<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Defers loading of modules until they are needed, rather than loading all modules at startup.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces initial load time and improves application performance.<\/p>\n<pre><code class=\"language-typescript\">const routes: Routes = [\n  {\n      path: 'feature',\n      loadChildren: () =&gt; import('.\/feature\/feature.module').then(m =&gt; m.FeatureModule)\n  }\n];<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>6. <strong>Preload Lazy-Loaded Modules<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s <code>PreloadAllModules<\/code> strategy to preload lazy-loaded modules after the initial load.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Balances initial load time with module availability.<\/p>\n<pre><code class=\"language-typescript\">RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>7. <strong>AOT Compilation (Ahead of Time)<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Pre-compiles the application at build time instead of runtime.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces application size and improves startup performance.<\/p>\n<pre><code class=\"language-json\">\"angularCompilerOptions\": {\n  \"enableIvy\": true,\n  \"aot\": true\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>8. <strong>Tree Shaking<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Removes unused code during the build process.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Decreases the size of the final JavaScript bundle, leading to faster load times.<\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n  \"minify\": true,\n  \"removeUnusedDependencies\": true\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>9. <strong>Optimize Image Loading<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses modern image formats (like WebP), lazy loading, and responsive images.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces the load on the network and improves rendering performance.<\/p>\n<pre><code class=\"language-html\">&lt;img src=\"image.webp\" loading=\"lazy\" alt=\"description\"&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>10. <strong>Code Splitting<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Splits the application code into smaller chunks that are loaded on demand.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Improves load times by only loading the necessary code for each route.<\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n  \"splitChunks\": {\n      \"chunks\": \"all\"\n  }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>11. <strong>Use Web Workers<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Offloads heavy computation to background threads.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents blocking the main thread, maintaining a responsive UI.<\/p>\n<pre><code class=\"language-typescript\">if (typeof Worker !== 'undefined') {\n  const worker = new Worker(new URL('.\/app.worker', import.meta.url));\n  worker.onmessage = ({ data }) =&gt; {\n      console.log(`Page received message: ${data}`);\n  };\n  worker.postMessage('hello');\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>12. <strong>Service Worker for Caching<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s service worker to cache application resources for offline access and faster load times.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces network requests and improves load performance.<\/p>\n<pre><code class=\"language-typescript\">import { ServiceWorkerModule } from '@angular\/service-worker';\nimport { environment } from '..\/environments\/environment';\n\nServiceWorkerModule.register('ngsw-worker.js', {\n  enabled: environment.production,\n  registrationStrategy: 'registerWhenStable:30000'\n})<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>13. <strong>Use <code>ng-container<\/code> to Group Elements<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses <code>ng-container<\/code> to avoid unnecessary <code>&lt;div&gt;<\/code> tags and reduce the size of the DOM tree.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Minimizes the number of elements in the DOM, leading to improved rendering performance.<\/p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=\"condition\"&gt;\n  &lt;p&gt;Content&lt;\/p&gt;\n&lt;\/ng-container&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>14. <strong>Throttle or Debounce Event Handlers<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses RxJS operators to limit the frequency of event handling.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces the number of function executions and subsequent change detection runs.<\/p>\n<pre><code class=\"language-typescript\">import { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs\/operators';\n\nfromEvent(document, 'click')\n  .pipe(debounceTime(300))\n  .subscribe((event) =&gt; console.log(event));<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>15. <strong>Memory Leak Prevention<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Ensures subscriptions are properly unsubscribed and components are destroyed cleanly.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents memory leaks, which can degrade performance over time.<\/p>\n<pre><code class=\"language-typescript\">import { Subscription } from 'rxjs';\nlet subscription: Subscription = new Subscription();\n\nngOnDestroy() {\n  subscription.unsubscribe();\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>16. <strong>Avoid Direct DOM Manipulation<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s templating system instead of direct DOM manipulation.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Ensures changes are tracked by Angular's change detection, maintaining application consistency.<\/p>\n<pre><code class=\"language-typescript\">this.renderer.setStyle(element, 'display', 'none');<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>17. <strong>Defer and Async Loading for Scripts<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Loads external scripts with <code>defer<\/code> or <code>async<\/code> attributes.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents blocking the main thread during script loading, improving initial render times.<\/p>\n<pre><code class=\"language-html\">&lt;script src=\"example.js\" defer&gt;&lt;\/script&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>18. <strong>Minimize Use of <code>*ngIf<\/code> and <code>*ngFor<\/code><\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Reduces the use of <code>*ngIf<\/code> and <code>*ngFor<\/code> directives to avoid frequent DOM changes.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Decreases change detection and re-rendering overhead.<\/p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=\"condition\"&gt;\n  &lt;!-- Conditional content here --&gt;\n&lt;\/ng-container&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>19. <strong>Enable Production Mode<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Ensures Angular runs in production mode, which disables development mode checks and optimizations.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces overhead and improves application performance.<\/p>\n<pre><code class=\"language-typescript\">import { enableProdMode } from '@angular\/core';\nimport { environment } from '.\/environments\/environment';\n\nif (environment.production) {\n  enableProdMode();\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>Configure tree shaking in angular app<\/h3>\n<p>Tree shaking is an optimization technique used to eliminate dead code (unused code) from a JavaScript bundle. In Angular applications, tree shaking is handled primarily by the build tool, which is usually Webpack, as part of the Angular CLI's build process. Here\u2019s how you can ensure tree shaking is effectively implemented in your Angular application:<\/p>\n<h3><strong>Key Steps to Ensure Tree Shaking in Angular Applications<\/strong><\/h3>\n<ol>\n<li>\n<p><strong>Ensure Production Mode is Enabled<\/strong><\/p>\n<p>Angular's build process differentiates between development and production builds. Production builds enable optimizations like tree shaking, minification, and Ahead-of-Time (AOT) compilation.<\/p>\n<p><strong>How to Enable:<\/strong><\/p>\n<ul>\n<li>\n<p><strong>Via Command Line<\/strong>:\nRun your build command with the <code>--prod<\/code> flag:<\/p>\n<pre><code class=\"language-bash\">ng build --prod<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>In <code>angular.json<\/code> Configuration<\/strong>:\nEnsure your <code>production<\/code> configuration has <code>optimization<\/code> enabled.<\/p>\n<pre><code class=\"language-json\">\"configurations\": {\n \"production\": {\n     \"optimization\": true,\n     \"outputHashing\": \"all\",\n     \"sourceMap\": false,\n     \"extractCss\": true,\n     \"namedChunks\": false,\n     \"aot\": true,\n     \"extractLicenses\": true,\n     \"vendorChunk\": false,\n     \"buildOptimizer\": true\n }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Use ES6 Module Imports<\/strong><\/p>\n<p>Tree shaking works best with ES6 module syntax because the static structure of ES6 imports and exports makes it easier for the build tool to determine which code is used and which isn\u2019t.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-typescript\"> \/\/ Import only the required parts\n import { Component, OnInit } from '@angular\/core';<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Avoid Dynamic <code>require<\/code> Statements<\/strong><\/p>\n<p>Avoid using dynamic <code>require<\/code> statements, as they can prevent tree shaking. Always use static imports.<\/p>\n<p><strong>Good:<\/strong><\/p>\n<pre><code class=\"language-typescript\">import { MyModule } from '.\/path\/to\/module';<\/code><\/pre>\n<p><strong>Bad:<\/strong><\/p>\n<pre><code class=\"language-typescript\">\/\/ Avoid dynamic imports that bring in unnecessary code\nconst MyModule = require('.\/path\/to\/module');\nconst Component = require('@angular\/core').Component;\n\n\/\/ Sometime\n  import('large-module').then(module =&gt; {\n    module.someFunction();\n  });<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Optimize Angular CLI Configuration (<code>angular.json<\/code>)<\/strong><\/p>\n<p>Ensure your <code>angular.json<\/code> file is set up to take advantage of the Angular CLI's optimizations.<\/p>\n<p><strong>Configuration Snippet:<\/strong><\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n   \"scripts\": true,\n   \"styles\": true,\n   \"fonts\": true\n},\n\"buildOptimizer\": true,<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Minimize Polyfills<\/strong><\/p>\n<p>Polyfills can add significant bloat to your application if not carefully managed. Only include necessary polyfills.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<ul>\n<li>Remove unnecessary polyfills from <code>polyfills.ts<\/code>.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Use <code>sideEffects<\/code> in <code>package.json<\/code><\/strong><\/p>\n<p>Specify that your code is side-effect free to help Webpack in identifying and eliminating dead code. The <code>sideEffects<\/code> field in <code>package.json<\/code> indicates which files are safe to prune.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-json\">{\n   \"name\": \"your-app\",\n   \"version\": \"1.0.0\",\n   \"sideEffects\": false\n}<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Use Angular CLI's Tree Shakable Libraries<\/strong><\/p>\n<p>Angular CLI supports tree-shakable libraries. Ensure the libraries you use are designed to support tree shaking by checking their <code>package.json<\/code> for proper module fields like <code>es2015<\/code>, <code>module<\/code>, or <code>esnext<\/code>.<\/p>\n<\/li>\n<li>\n<p><strong>Optimize Third-Party Library Imports<\/strong><\/p>\n<p>Import only what you need from third-party libraries instead of the entire library.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-typescript\">\/\/ Good: Import only required parts\nimport { debounceTime } from 'rxjs\/operators';\n\n\/\/ Bad: Import the whole library\nimport * as _ from 'lodash';<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Use AOT Compilation<\/strong><\/p>\n<p>AOT compilation precompiles the Angular application before the browser downloads and runs it. This helps reduce the bundle size and improve the runtime performance, indirectly aiding tree shaking.<\/p>\n<p><strong>How to Enable:<\/strong><\/p>\n<ul>\n<li>\n<p><strong>Via Command Line<\/strong>:<\/p>\n<pre><code class=\"language-bash\">ng build --aot<\/code><\/pre>\n<\/li>\n<li><strong>In <code>angular.json<\/code><\/strong>:\n<pre><code class=\"language-json\">\"aot\": true<\/code><\/pre><\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Review Webpack Configuration (Advanced)<\/strong><\/p>\n<p>Although Angular CLI abstracts Webpack configuration, advanced users might want to review and adjust Webpack settings directly to ensure tree shaking is optimized.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<ul>\n<li>\n<p>Custom Webpack configuration through Angular CLI builders like <code>@angular-builders\/custom-webpack<\/code>.<\/p>\n<pre><code class=\"language-json\">\"architect\": {\n  \"build\": {\n      \"builder\": \"@angular-builders\/custom-webpack:browser\",\n      \"options\": {\n          \"customWebpackConfig\": {\n              \"path\": \".\/extra-webpack.config.js\"\n          },\n          \/\/ other options...\n      }\n  }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Monitor and Analyze Bundle Size<\/strong><\/p>\n<p>Regularly analyze your bundle size to ensure tree shaking is effectively reducing the application size. Tools like <code>source-map-explorer<\/code> or <code>webpack-bundle-analyzer<\/code> can be used for this purpose.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-bash\">  npm install -g source-map-explorer\n  source-map-explorer dist\/your-app\/main.*.js<\/code><\/pre>\n<\/li>\n<\/ol>\n<h3>Summary<\/h3>\n<p>To ensure effective tree shaking in your Angular application:<\/p>\n<ol>\n<li><strong>Enable Production Mode<\/strong> in your build configuration.<\/li>\n<li><strong>Use ES6 Module Imports<\/strong> and avoid dynamic requires.<\/li>\n<li><strong>Optimize Angular CLI Configuration<\/strong> for tree shaking.<\/li>\n<li><strong>Minimize Polyfills<\/strong> and specify side effects in <code>package.json<\/code>.<\/li>\n<li><strong>Leverage Tree Shakable Libraries<\/strong> and optimize third-party imports.<\/li>\n<li><strong>Utilize AOT Compilation<\/strong> for pre-compilation benefits.<\/li>\n<li><strong>Analyze Bundle Size<\/strong> to verify the effectiveness of tree shaking.<\/li>\n<\/ol>\n<p>By following these steps, you can significantly reduce your application's bundle size, leading to faster load times and better performance.<\/p>\n<h3>Conclusion<\/h3>\n<p>Applying these performance optimization steps can significantly enhance the responsiveness, efficiency, and overall user experience of an Angular application. Each step targets specific aspects of application performance, from initial load times to runtime efficiency and resource management.<\/p>",
			"addpost": "addpost",
			"dated": "June 24, 2024 11:07 AM",
			"slug": "angular-perfomane-optimisation",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>List of performance optimization steps for Angular applications<\/p>\n<h3>1. <strong>Event Coalescing<\/strong>: <code>{ngZoneEventCoalescing: true}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Aggregates multiple events into a single change detection run.<\/li>\n<li><strong>Benefits<\/strong>: R...<\/li><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "ES6 Features",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>Below is a comprehensive list of these features:\nES6 = ECMAScript 2015<\/p>\n<h3>1. <strong>Arrow Functions<\/strong><\/h3>\n<ul>\n<li>Syntactic sugar for anonymous functions with a concise syntax.<\/li>\n<li>\n<p>Does not have its own <code>this<\/code> context, which is lexically scoped.<\/p>\n<pre><code class=\"language-javascript\">const add = (a, b) =&gt; a + b;<\/code><\/pre>\n<h3>2. <strong>Block-Scoped Variables: <code>let<\/code> and <code>const<\/code><\/strong><\/h3>\n<\/li>\n<li><code>let<\/code>: Allows block-scoped variables.<\/li>\n<li>\n<p><code>const<\/code>: Declares block-scoped constants that cannot be reassigned.<\/p>\n<pre><code class=\"language-javascript\">  let variable = \"mutable\";\n  const constant = \"immutable\";<\/code><\/pre>\n<h3>3. <strong>Default Parameters<\/strong><\/h3>\n<\/li>\n<li>\n<p>Allows function parameters to have default values.<\/p>\n<pre><code class=\"language-javascript\">function greet(name = \"World\") {\n    return `Hello, ${name}`;\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>4. <strong>Template Literals<\/strong><\/h3>\n<ul>\n<li>\n<p>Multi-line strings and string interpolation using backticks (`).<\/p>\n<pre><code class=\"language-javascript\">const name = \"John\";\nconst greeting = `Hello, ${name}!`;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>5. <strong>Destructuring Assignment<\/strong><\/h3>\n<ul>\n<li>\n<p>Extract values from arrays or properties from objects into distinct variables.<\/p>\n<pre><code class=\"language-javascript\">const [x, y] = [1, 2];\nconst { name, age } = { name: \"Alice\", age: 25 };<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>6. <strong>Rest and Spread Operators<\/strong><\/h3>\n<ul>\n<li><code>Rest<\/code>: Collects arguments into an array.<\/li>\n<li>\n<p><code>Spread<\/code>: Expands elements of an array or object.<\/p>\n<pre><code class=\"language-javascript\">const sum = (...args) =&gt; args.reduce((a, b) =&gt; a + b, 0); \/\/ Rest\nconst arr = [1, 2, 3];\nconst newArr = [...arr, 4, 5]; \/\/ Spread<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>7. <strong>Enhanced Object Literals<\/strong><\/h3>\n<ul>\n<li>\n<p>Shorthand property names, method definitions, and computed property names.<\/p>\n<pre><code class=\"language-javascript\">const name = \"Alice\";\nconst person = {\n  name,\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  },\n};<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>8. <strong>Classes<\/strong><\/h3>\n<ul>\n<li>\n<p>Syntactic sugar for creating objects and handling inheritance.<\/p>\n<pre><code class=\"language-javascript\">class Person {\n  constructor(name) {\n    this.name = name;\n  }\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>9. <strong>Modules (import\/export)<\/strong><\/h3>\n<ul>\n<li>\n<p>Official support for module loading with <code>import<\/code> and <code>export<\/code> keywords.<\/p>\n<pre><code class=\"language-javascript\">\/\/ module.js\nexport const name = \"Alice\";\n\n\/\/ main.js\nimport { name } from '.\/module.js';<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>10. <strong>Promises<\/strong><\/h3>\n<ul>\n<li>\n<p>Asynchronous operations management with <code>then<\/code>, <code>catch<\/code>, and <code>finally<\/code>.<\/p>\n<pre><code class=\"language-javascript\">const promise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; resolve(\"Done\"), 1000);\n});\n\npromise.then(result =&gt; console.log(result));<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>11. <strong>Block-Scoped Functions<\/strong><\/h3>\n<ul>\n<li>\n<p>Functions defined in a block are scoped to that block.<\/p>\n<pre><code class=\"language-javascript\">if (true) {\n  function sayHi() {\n    console.log(\"Hi\");\n  }\n  sayHi();\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>12. <strong>Generators<\/strong><\/h3>\n<ul>\n<li>\n<p>Functions that can be paused and resumed, maintaining their own state.<\/p>\n<pre><code class=\"language-javascript\">function* generator() {\nyield 1;\nyield 2;\nreturn 3;\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>13. <strong>New Built-in Methods<\/strong><\/h3>\n<ul>\n<li>\n<p>New methods for various objects like <code>Array<\/code>, <code>String<\/code>, <code>Object<\/code>, etc.<\/p>\n<pre><code class=\"language-javascript\">const str = \"hello\";\nstr.includes(\"e\"); \/\/ true\n\nconst arr = Array.from(\"hello\");<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>14. <strong>New Collections: Map, Set, WeakMap, WeakSet<\/strong><\/h3>\n<ul>\n<li><code>Map<\/code>: Key-value pairs.<\/li>\n<li><code>Set<\/code>: Unique values.<\/li>\n<li>\n<p><code>WeakMap<\/code> and <code>WeakSet<\/code>: Garbage-collection friendly collections.<\/p>\n<pre><code class=\"language-javascript\">const map = new Map();\nmap.set('key', 'value');\n\nconst set = new Set([1, 2, 2, 3]);<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>15. <strong>for...of Loop<\/strong><\/h3>\n<ul>\n<li>\n<p>Iterates over iterable objects like arrays, strings, etc.<\/p>\n<pre><code class=\"language-javascript\">for (const item of [1, 2, 3]) {\n  console.log(item);\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>16. <strong>Binary and Octal Literals<\/strong><\/h3>\n<ul>\n<li>\n<p>Literal notations for binary (<code>0b<\/code>) and octal (<code>0o<\/code>) numbers.<\/p>\n<pre><code class=\"language-javascript\">const binary = 0b1010;\nconst octal = 0o755;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>17. <strong>New Target Meta-Property<\/strong><\/h3>\n<ul>\n<li>\n<p>Provides a reference to the target of a function call.<\/p>\n<pre><code class=\"language-javascript\">class Parent {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\n\nclass Child extends Parent {\n  constructor() {\n    super();\n  }\n}\n\nnew Child(); \/\/ logs \"Child\"<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>18. <strong>New Math, Number, String, Object Methods<\/strong><\/h3>\n<ul>\n<li>\n<p>New methods for mathematical computations, number checking, string manipulation, and object handling.<\/p>\n<pre><code class=\"language-javascript\">Number.isFinite(42); \/\/ true\nMath.trunc(4.9); \/\/ 4\nObject.assign({}, {a: 1}, {b: 2}); \/\/ {a: 1, b: 2}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>19. <strong>Reflect API<\/strong><\/h3>\n<ul>\n<li>\n<p>Provides methods for interceptable JavaScript operations, similar to the proxy handlers.<\/p>\n<pre><code class=\"language-javascript\">const obj = { x: 1 };\nReflect.set(obj, 'x', 2);<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>20. <strong>Proxy API<\/strong><\/h3>\n<ul>\n<li>\n<p>Used to define custom behavior for fundamental operations (e.g., property lookup, assignment).<\/p>\n<pre><code class=\"language-javascript\">const handler = {\n  get: (target, property) =&gt; {\n    return property in target ? target[property] : 42;\n  }\n};\n\nconst proxy = new Proxy({}, handler);\nconsole.log(proxy.foo); \/\/ 42<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>21. <strong>Symbol Type<\/strong><\/h3>\n<ul>\n<li>\n<p>A new primitive type for creating unique identifiers.<\/p>\n<pre><code class=\"language-javascript\">const sym = Symbol(\"identifier\");\nconst obj = { [sym]: \"value\" };<\/code><\/pre>\n<\/li>\n<\/ul>\n<hr \/>\n<h4>In Summary:<\/h4>\n<h5>Arrow functions, let and const, default parameters, template       literals, destructuring assignment, rest and spread operators,       enhanced object literals, classes, modules (import\/export), promises,    block-scoped functions, generators, new built-in methods       (String.prototype.includes, Array.from, etc.), new collections (Map,     Set, WeakMap, WeakSet), for...of loop, binary and octal literals, new    target meta-property, new Math, Number, String, Object methods,       Reflect API, Proxy API, Symbol type.<\/h5>\n<hr \/>\n<ul>\n<li><strong>declaration<\/strong> - let,const<\/li>\n<li><strong>data type(primitive, nonprimitive)<\/strong> - Symbol, binary, octal<\/li>\n<li><strong>operator<\/strong> -&gt; ??, ...<\/li>\n<li><strong>enhanced object literal , template literal<\/strong><\/li>\n<li><strong>conditions\/loop<\/strong> -&gt; (for of loop)<\/li>\n<li><strong>function<\/strong> - blocked scope, default params assignment<\/li>\n<li><strong>generators<\/strong> yeild<\/li>\n<li><strong>class<\/strong> - new.target.name<\/li>\n<li><strong>new methods<\/strong> - String, Number, Array, Object Prototype<\/li>\n<li><strong>new collection<\/strong> - Map, Set, WeekMap, WeekSet<\/li>\n<li><strong>module<\/strong> - export\/import<\/li>\n<li><strong>API<\/strong> - Math, Proxy, Reflect<\/li>\n<\/ul>\n<hr \/>\n<p><img src=\"https:\/\/i.imgur.com\/NaX1CXC.png\" alt=\"medium\" \/><\/p>",
			"savedraft": "savedraft",
			"dated": "June 24, 2024 07:24 AM",
			"slug": "es6-features",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>Below is a comprehensive list of these features:\nES6 = ECMAScript 2015<\/p>\n<h3>1. <strong>Arrow Functions<\/strong><\/h3>\n<ul>\n<li>Syntactic sugar for anonymous functions with a concise syntax.<\/li>\n<li>\n<p>Does not have its own <code>this<\/code> context, which is lexically scoped.<\/p>\n<pre><code c...><\/code><\/pre><\/li><\/ul>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "tsConfig.json configuration details",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>The <code>tsconfig.json<\/code> file is essential for configuring TypeScript projects, providing a wide range of options to control the compilation process. Below is a comprehensive list of <code>tsconfig.json<\/code> properties along with detailed descriptions and examples for each.<\/p>\n<h3>Overall Structure<\/h3>\n<p>A typical <code>tsconfig.json<\/code> file looks like this:<\/p>\n<pre><code>{\n  \"compilerOptions\": {\n    \/\/ Compiler options go here\n  },\n  \"include\": [\n    \/\/ File patterns to include\n  ],\n  \"exclude\": [\n    \/\/ File patterns to exclude\n  ],\n  \"files\": [\n    \/\/ Specific files to include\n  ],\n  \"references\": [\n    \/\/ References to other tsconfig files for project references\n  ],\n  \"extends\": \"path\/to\/base\/tsconfig\",\n  \"typeAcquisition\": {\n    \/\/ Type acquisition options for type definitions\n  },\n  \"compileOnSave\": true,\n  \"tsBuildInfoFile\": \"path\/to\/tsbuildinfo\",\n  \"watchOptions\": {\n    \/\/ Options for the watch mode\n  },\n  \"assumeChangesOnlyAffectDirectDependencies\": true,\n  \"plugins\": [\n    \/\/ Plugins to extend TypeScript functionality\n  ]\n}<\/code><\/pre>\n<h3>Detailed Descriptions<\/h3>\n<h4><code>compilerOptions<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Contains settings that influence the behavior of the TypeScript compiler.<\/li>\n<li><strong>Type<\/strong>: <code>object<\/code><\/li>\n<li>\n<p><strong>Common Properties<\/strong>:<\/p>\n<ul>\n<li>\n<p><strong><code>target<\/code><\/strong>: Specifies the output JavaScript version. Common values are <code>\"ES5\"<\/code>, <code>\"ES6\"<\/code>, <code>\"ES2015\"<\/code>, <code>\"ES2020\"<\/code>, etc.\n<code>{target\": \"ES6\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>module<\/code><\/strong>: Determines the module code generation. Options include <code>\"commonjs\"<\/code>, <code>\"amd\"<\/code>, <code>\"esnext\"<\/code>, etc.\n<code>{\"module\": \"commonjs\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>strict<\/code><\/strong>: Enables all strict type-checking options.\n<code>{\"strict\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>outDir<\/code><\/strong>: Specifies the output directory for compiled files.\n<code>{ \"outDir\": \".\/dist\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>rootDir<\/code><\/strong>: Specifies the root directory of input files.\n<code>{\"rootDir\": \".\/src\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>sourceMap<\/code><\/strong>: Generates corresponding <code>.map<\/code> files for debugging.\n<code>{ \"sourceMap\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>declaration<\/code><\/strong>: Generates corresponding <code>.d.ts<\/code> files for TypeScript definitions.\n<code>{\"declaration\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>moduleResolution<\/code><\/strong>: Specifies the module resolution strategy, such as <code>\"node\"<\/code> or <code>\"classic\"<\/code>.\n<code>{\"moduleResolution\": \"node\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>lib<\/code><\/strong>: Includes standard library files in the compilation.\n<code>{\"lib\": [\"ES6\", \"DOM\"]}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>esModuleInterop<\/code><\/strong>: Enables interoperability between CommonJS and ES modules.\n<code>{\"esModuleInterop\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>jsx<\/code><\/strong>: Specifies the JSX code generation for React. Options are <code>\"preserve\"<\/code>, <code>\"react\"<\/code>, <code>\"react-jsx\"<\/code>, etc.\n<code>{\"jsx\": \"react\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>allowJs<\/code><\/strong>: Allows JavaScript files to be compiled.\n<code>{\"allowJs\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>checkJs<\/code><\/strong>: Type-checks JavaScript files.\n<code>{\"checkJs\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>baseUrl<\/code><\/strong>: Base directory for resolving non-relative module names.\n<code>{\"baseUrl\": \".\/\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>paths<\/code><\/strong>: A set of path mappings for module resolution.\n<code>{\"paths\": { \"@app\/*\": [\"src\/app\/*\"] }}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>typeRoots<\/code><\/strong>: Specifies directories containing type definitions.\n<code>{\"typeRoots\": [\".\/node_modules\/@types\"]}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>noEmit<\/code><\/strong>: Disables the emitting of output files.\n<code>{\"noEmit\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>skipLibCheck<\/code><\/strong>: Skips type checking of declaration files.\n<code>{\"skipLibCheck\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>noImplicitAny<\/code><\/strong>: Raises errors on expressions and declarations with an implied <code>any<\/code> type.\n<code>{\"noImplicitAny\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>resolveJsonModule<\/code><\/strong>: Enables importing JSON modules.\n<code>{\"resolveJsonModule\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>emitDecoratorMetadata<\/code><\/strong>: Emits design-type metadata for decorators.\n<code>{\"emitDecoratorMetadata\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>experimentalDecorators<\/code><\/strong>: Enables experimental support for decorators.\n<code>{\"experimentalDecorators\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>incremental<\/code><\/strong>: Enables incremental compilation, which speeds up builds.\n<code>{ \"incremental\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>composite<\/code><\/strong>: Enables project compilation.\n<code>{\"composite\": true}<\/code><\/p>\n<\/li>\n<li><strong><code>tsBuildInfoFile<\/code><\/strong>: Specifies the location of the build information file.\n<code>{\"tsBuildInfoFile\": \".\/build\/cache\/tsbuildinfo.json\"}<\/code><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4><code>include<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies an array of file patterns to include in the compilation.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{\"include\": [\"src\/**\/*\", \"tests\/**\/*\"]}<\/code><\/li>\n<\/ul>\n<h4><code>exclude<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies an array of file patterns to exclude from the compilation.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{\"exclude\": [\"node_modules\", \"dist\", \"build\"]}<\/code><\/li>\n<\/ul>\n<h4><code>files<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Lists specific files to include in the compilation, regardless of the <code>include<\/code> and <code>exclude<\/code> settings.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{\"files\": [\"src\/index.ts\", \"src\/globals.d.ts\"]}<\/code><\/li>\n<\/ul>\n<h4><code>references<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies a list of project references, allowing TypeScript projects to depend on other TypeScript projects.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"references\": [ { \"path\": \"..\/common\" }, { \"path\": \"..\/utilities\" } ]}<\/code><\/li>\n<\/ul>\n<h4><code>extends<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Allows the <code>tsconfig.json<\/code> to extend another configuration file.<\/li>\n<li><strong>Type<\/strong>: <code>string<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"extends\": \".\/base\/tsconfig.json\" }<\/code><\/li>\n<\/ul>\n<h4><code>typeAcquisition<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Controls the acquisition of type definitions for JavaScript projects.<\/li>\n<li><strong>Type<\/strong>: <code>object<\/code><\/li>\n<li><strong>Properties<\/strong>:\n<ul>\n<li><strong><code>enable<\/code><\/strong>: Enables type acquisition.\n<code>{ \"enable\": true }<\/code><\/li>\n<li><strong><code>include<\/code><\/strong>: Specifies a list of type definitions to include.\n<code>{ \"include\": [\"jest\", \"lodash\"] }<\/code><\/li>\n<li><strong><code>exclude<\/code><\/strong>: Specifies a list of type definitions to exclude.\n<code>{ \"exclude\": [\"express\"] }<\/code><\/li>\n<\/ul><\/li>\n<\/ul>\n<h4><code>compileOnSave<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: If set to <code>true<\/code>, TypeScript will compile files upon saving in the IDE.<\/li>\n<li><strong>Type<\/strong>: <code>boolean<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"compileOnSave\": true }<\/code><\/li>\n<\/ul>\n<h4><code>tsBuildInfoFile<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies the location of the build information file to store incremental compilation information.<\/li>\n<li><strong>Type<\/strong>: <code>string<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"tsBuildInfoFile\": \".\/build\/cache\/tsbuildinfo.json\" }<\/code><\/li>\n<\/ul>\n<h4><code>watchOptions<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies options for watching files in watch mode.<\/li>\n<li><strong>Type<\/strong>: <code>object<\/code><\/li>\n<li><strong>Properties<\/strong>:\n<ul>\n<li><strong><code>watchFile<\/code><\/strong>: Strategy for watching files.\n<code>{ \"watchFile\": \"useFsEvents\" }<\/code><\/li>\n<li><strong><code>watchDirectory<\/code><\/strong>: Strategy for watching directories.\n<code>{ \"watchDirectory\": \"useFsEvents\" }<\/code><\/li>\n<li><strong><code>fallbackPolling<\/code><\/strong>: Polling strategy for systems where <code>fs.watch<\/code> cannot be used.\n<code>{ \"fallbackPolling\": \"dynamicPriority\" }<\/code><\/li>\n<\/ul><\/li>\n<\/ul>\n<h4><code>assumeChangesOnlyAffectDirectDependencies<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: When set to <code>true<\/code>, TypeScript assumes changes only affect direct dependencies, which can speed up incremental builds.<\/li>\n<li><strong>Type<\/strong>: <code>boolean<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"assumeChangesOnlyAffectDirectDependencies\": true }<\/code><\/li>\n<\/ul>\n<h4><code>plugins<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies a list of plugins that extend TypeScript's functionality.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"plugins\": [ { \"name\": \"typescript-tslint-plugin\" }, { \"name\": \"typescript-styled-plugin\" } ] }<\/code><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "June 23, 2024 06:31 PM",
			"slug": "tsconfigjson-configuration-details",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>The <code>tsconfig.json<\/code> file is essential for configuring TypeScript projects, providing a wide range of options to control the compilation process. Below is a comprehensive list of <code>tsconfig.json<\/code> properties along with detailed descriptions and examples for each.<\/p>\n<h3>Overal...<\/h3>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "When does Angular's change detection fail to work properly?",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>Scenarios where Angular's change detection might not work as expected, specifically in projects and library components.<\/p>\n<ol>\n<li>\n<p><strong>Changes in Asynchronous Operations<\/strong>\n<br>you may need to manually trigger change detection using <code>ChangeDetectorRef.detectChanges()<\/code><\/p>\n<\/li>\n<li><strong>Immutable Objects<\/strong>\n<br>An object where its reference does not change, but its internal state does.\nYou should use methods that return new instances when modifying immutable objects (e.g., Array methods like map, filter, etc., or libraries like Immutable.js, a nested object or array).\n<br>ex.\n<pre><code>this.agGridDynamicConfig = {... this.agGridDynamicConfig}<\/code><\/pre><\/li>\n<li>\n<p><strong>Events Outside Angular's Zone<\/strong>\n<br> If events (like DOM events) occur outside Angular's zone. You can use <code>NgZone.run()<\/code> to execute code within Angular's zone.<\/p>\n<\/li>\n<li><strong>Third-Party Libraries<\/strong>\n<br> If you're using third-party libraries that manipulate the DOM directly or change component state outside Angular's knowledge, you may need to wrap these operations in Angular's zone or handle change detection manually<\/li>\n<\/ol>",
			"savedraft": "savedraft",
			"dated": "June 22, 2024 07:23 PM",
			"slug": "when-does-angulars-change-detection-fail-to-work-properly",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>Scenarios where Angular's change detection might not work as expected, specifically in projects and library components.<\/p>\n<ol>\n<li>\n<p><strong>Changes in Asynchronous Operations<\/strong>\n<br>you may need to manually trigger change detection using <code>ChangeDetectorRef.detectChanges()<\/code><\/p><\/li><\/ol>\n",
			"addpost": "addpost",
			"prevStatus": "draft",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "package.json configuration",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>The most common fields and configurations found in package.json. Depending on the project's needs and tooling used, some of these configurations may not be present or may have additional custom configurations.<\/p>\n<ol>\n<li>\n<p><strong>name<\/strong>: The name of the package or project.<\/p>\n<\/li>\n<li>\n<p><strong>version<\/strong>: The version of the package or project, following Semantic Versioning (SemVer).<\/p>\n<\/li>\n<li>\n<p><strong>description<\/strong>: A brief description of the package or project.<\/p>\n<\/li>\n<li>\n<p><strong>keywords<\/strong>: An array of keywords that describe the package, useful for search optimization.<\/p>\n<\/li>\n<li>\n<p><strong>homepage<\/strong>: The URL to the project's homepage.<\/p>\n<\/li>\n<li>\n<p><strong>bugs<\/strong>: Information about where to report bugs for the package.<\/p>\n<\/li>\n<li>\n<p><strong>license<\/strong>: The license under which the package is distributed.<\/p>\n<\/li>\n<li>\n<p><strong>author<\/strong>: The name and email address of the package author.<\/p>\n<\/li>\n<li>\n<p><strong>contributors<\/strong>: An array of contributors to the project.<\/p>\n<\/li>\n<li>\n<p><strong>files<\/strong>: An array of files to include in the package.<\/p>\n<\/li>\n<li>\n<p><strong>main<\/strong>: The entry point of the package (the main module that gets executed when the package is required).<\/p>\n<\/li>\n<li>\n<p><strong>browser<\/strong>: Replacement files to use in the browser environment.<\/p>\n<\/li>\n<li>\n<p><strong>bin<\/strong>: Specifies command-line commands that are installed with the package.<\/p>\n<\/li>\n<li>\n<p><strong>scripts<\/strong>: An object where each key is a script name and the value is the command to run for that script.<\/p>\n<\/li>\n<li>\n<p><strong>dependencies<\/strong>: An object listing the packages that the project depends on in production.<\/p>\n<\/li>\n<li>\n<p><strong>devDependencies<\/strong>: An object listing packages that are only needed for development and testing.<\/p>\n<\/li>\n<li>\n<p><strong>peerDependencies<\/strong>: An object listing packages that the project expects the host environment to provide.<\/p>\n<\/li>\n<li>\n<p><strong>optionalDependencies<\/strong>: An object listing packages that are optional dependencies.<\/p>\n<\/li>\n<li>\n<p><strong>engines<\/strong>: Specifies the versions of Node.js and npm that the package is compatible with.<\/p>\n<\/li>\n<li>\n<p><strong>os<\/strong>: An array of operating systems on which the package runs.<\/p>\n<\/li>\n<li>\n<p><strong>cpu<\/strong>: An array of CPUs that the package runs on.<\/p>\n<\/li>\n<li>\n<p><strong>private<\/strong>: If true, prevents the package from being accidentally published to the npm registry.<\/p>\n<\/li>\n<li>\n<p><strong>publishConfig<\/strong>: Configures publishing options when using npm publish.<\/p>\n<\/li>\n<li>\n<p><strong>directories<\/strong>: Specifies a directory structure for the package.<\/p>\n<\/li>\n<li>\n<p><strong>repository<\/strong>: The URL and type of source control repository for the package.<\/p>\n<\/li>\n<li>\n<p><strong>scripts<\/strong>: Custom scripts that can be run with npm, typically used for build, test, and other automation tasks.<\/p>\n<\/li>\n<li>\n<p><strong>config<\/strong>: Configuration parameters that can be used by the scripts.<\/p>\n<\/li>\n<li>\n<p><strong>workspaces<\/strong>: An array of workspace packages that are part of a multi-package repository.<\/p>\n<\/li>\n<li>\n<p><strong>jest<\/strong> (or other test runner configurations): Specific configurations for test runners like Jest.<\/p>\n<\/li>\n<li><strong>eslintConfig<\/strong> (or other linter configurations): Configuration for linters like ESLint.<\/li>\n<\/ol>\n<p>ex.<\/p>\n<pre><code>{\n  \"name\": \"my-node-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A sample Node.js project\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.2\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^27.0.0\"\n  },\n  \"author\": \"Your Name\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https:\/\/github.com\/your-username\/my-node-project.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https:\/\/github.com\/your-username\/my-node-project\/issues\"\n  },\n  \"homepage\": \"https:\/\/github.com\/your-username\/my-node-project#readme\"\n}<\/code><\/pre>",
			"savedraft": "savedraft",
			"dated": "June 22, 2024 06:03 PM",
			"slug": "packagejson-configuration",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>The most common fields and configurations found in package.json. Depending on the project's needs and tooling used, some of these configurations may not be present or may have additional custom configurations.<\/p>\n<ol>\n<li>\n<p><strong>name<\/strong>: The name of the package or project.<\/p>\n<\/li>\n<...><\/...><\/ol>\n",
			"addpost": "addpost",
			"prevStatus": "draft",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Watch - Production Errors & Issues,  Important Transactions from a system MQ",
			"tags": [
				"common"
			],
			"category": "PHP",
			"body": "<p>Why need to watch the live system since resposibility is over.<\/p>\n<p>Ans:- Before <strong>time<\/strong> should rectify the mistakes\/errors to save from a <strong>huge loss<\/strong>.<\/p>\n<p>So to track your live system in a given period of time, get the group messages about trackable events in a MQ. <\/p>\n<p>Ex.\nSome time code migrates from one server to another server, time zone changes, watch orders, verify user activity with same time, watch cron jobs are working with required time. <\/p>\n<ul>\n<li>Patch MQ to the logger to track each event<\/li>\n<li>Event can be a server error, language\/framewortk error, output of the given input<\/li>\n<\/ul>",
			"savedraft": "savedraft",
			"dated": "June 15, 2024 03:42 PM",
			"slug": "watch-production-errors-issues-important-transactions-from-a-system-mq",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>Why need to watch the live system since resposibility is over.<\/p>\n<p>Ans:- Before <strong>time<\/strong> should rectify the mistakes\/errors to save from a <strong>huge loss<\/strong>.<\/p>\n<p>So to track your live system in a given period of time, get the group messages about trackable events in a ...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "draft",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Uses of Http Guzzle PHP",
			"tags": [
				"common"
			],
			"category": "PHP",
			"body": "<h4>About PHP Guzzle for API<\/h4>\n<ol>\n<li>\n<p><code>Initialize th instance<\/code><\/p>\n<pre>$this->client = new \\GuzzleHttp\\Client();<\/pre>\n<\/li>\n<li>\n<p><code>Get Method<\/code><\/p>\n<pre>\n$params = Array(\n        'key1' => $id, \n        'key2' => $value,\n       );\n$promise = $this->client->request('GET',  route('statement'), [\n    'query' => $params,\n    'debug' => false\n]);\n\n$promise->getBody()->rewind();\n$output = $promise->getBody()->getContents();\n$httpStatusCode = $promise->getStatusCode();\n<\/pre>\n<\/li>\n<li>\n<p><code>Post Method: Raw data posting like posting json in payload<\/code><\/p>\n<pre>\n$rawInput = json_encode($array); \/\/ string\n\n-OR-\n\n$rawInput = <<<EOF\n        SET empdata 2 \u2018Jack Petter\u2019 \u2018192.168.11.11\u2019\n        GET empdata \u2018192.168.11.11\u2019\n        SET empwebhistory 192.168.11.11 \u2018http:\/\/google.com\u2019\n        SET empwebhistory 192.168.11.11 \u2018http:\/\/facebook.com\u2019\n        GET empwebhistory  192.168.11.11\n        UNSET empwebhistory  192.168.11.11\n        GET empwebhistory 192.168.11.11\n        END\n    EOF;\n\n$promise = $this->client->request('POST',  route('statement'), [\n    'body' => $rawInput,\n    'debug' => false\n]);\n\n$promise->getBody()->rewind();\n$output = $promise->getBody()->getContents();\n$httpStatusCode = $promise->getStatusCode();\n<\/pre>\n<\/li>\n<li>\n<p><code>Post using Form Fields<\/code><\/p>\n<pre>\n$filedInputs = Array(\n    'email' => 'test@gmail.com',\n    'name' => 'Test user',\n    'password' => 'testpassword',\n);\n\n$promise = $this->client->request('POST',  route('statement'), [\n    'form_params' => $rawInput,\n    'debug' => false\n]);\n\n$promise->getBody()->rewind();\n$output = $promise->getBody()->getContents();\n$httpStatusCode = $promise->getStatusCode();\n<\/pre>\n<\/li>\n<li>\n<p><code>POST File Upload from Directory<\/code><\/p>\n<pre>\n$promise = $this->client->request('POST', 'http:\/\/www.example.com\/files\/post', [\n    'multipart' => [\n        [\n            'name'     => 'file_name',\n            'contents' => fopen('\/path\/to\/file', 'r')\n        ],\n        [\n            'name'     => 'csv_header',\n            'contents' => 'First Name, Last Name, Username',\n            'filename' => 'csv_header.csv'\n        ]\n    ]\n]);\n\n$promise->getBody()->rewind();\n$output = $promise->getBody()->getContents();\n$httpStatusCode = $promise->getStatusCode();\n<\/pre>\n<\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "April 24, 2020 02:42 PM",
			"slug": "uses-of-http-guzzle-php",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<h4>About PHP Guzzle for API<\/h4>\n<ol><li>\n<p><code>Initialize th instance<\/code><\/p>\n<pre>$this-&gt;client = new \\GuzzleHttp\\Client();<\/pre>\n<\/li>\n<li>\n<p><code>Get Method<\/code><\/p>\n<pre>\n$params = Array(\n        'key1' =&gt; $id, \n        'key2' =&gt; $value,\n       );\n$promise = $this-&gt;client-&gt;request('...<\/pre><\/li><\/ol>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "API Rate-Limiting",
			"tags": [
				"PHP",
				"Server"
			],
			"category": "Linux",
			"body": "<p><strong>Implementing API Rate-Limiting<\/strong><\/p>\n<ol>\n<li>\n<p>Request Queues:<\/p>\n<ul>\n<li>Ex. ASQS(Amazon Simple Queue Service) is a readymade request queue library maintianed regularly.<\/li>\n<li>Some library take 2 request per second from the queue and remaining kept in the queue for processing.<\/li>\n<li>Many custom &quot;request-rate-limiter&quot; library are avaialbe in package manager<\/li>\n<\/ul>\n<\/li>\n<li>\n<p>Throttling<\/p>\n<ul>\n<li>API is used by setting up a temporary state, allowing the API to assess each request. When the throttle is triggered, a user may either be disconnected or simply have their bandwidth reduced.<\/li>\n<li>Possible at the application, API, or user level, throttling is a popular method to rate-limit APIs<\/li>\n<\/ul>\n<\/li>\n<li>Rate-limiting Algorithms\n<ul>\n<li>&quot;Leaky Bucket&quot; is a algorithim which translate requests into FIFO format and processing the items on the queue on a regular rate.<\/li>\n<li>&quot;Sliding Log&quot; is time stampped algorithim, the sum of the logs are calculated to determine the request rate. if the request exceeds the limit threshold, they are simply queued.<\/li>\n<\/ul><\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "April 14, 2020 06:17 PM",
			"slug": "api-rate-limiting",
			"categoryslug": "linux",
			"status": "publised",
			"summary": "\n<p><strong>Implementing API Rate-Limiting<\/strong><\/p>\n<ol><li>\n<p>Request Queues:<\/p>\n<ul><li>Ex. ASQS(Amazon Simple Queue Service) is a readymade request queue library maintianed regularly.<\/li>\n<li>Some library take 2 request per second from the queue and remaining kept in the queue for process...<\/li><\/ul><\/li><\/ol>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Most Useful Linux Commands",
			"tags": [
				"common"
			],
			"category": "Linux",
			"body": "<ul>\n<li>\n<p><strong>uname<\/strong> command is simple tool which provides information about the kernel, machine, processor, and operating system<\/p>\n<p><code>uname -m<\/code><\/p>\n<\/li>\n<li>\n<p>check ubuntu linux version<\/p>\n<p><code>lsb_release -a<\/code><\/p>\n<\/li>\n<li>\n<p>show the amount of free disk space on each mounted disk<\/p>\n<p><code>df -h<\/code><\/p>\n<\/li>\n<li>\n<p>displays the total amount of free space available along with the amount of memory used and swap memory in the system<\/p>\n<p><code>free --human<\/code><\/p>\n<\/li>\n<li>\n<p>The grep filter searches a file for a particular pattern of characters, and displays all lines that contain that pattern<\/p>\n<p><code>grep -iRl \"your-text-to-find\" .\/<\/code><\/p>\n<\/li>\n<li>\n<p>displays network connections for Transmission Control Protocol<\/p>\n<p><code>netstat -tlnp<\/code><\/p>\n<\/li>\n<li>\n<p>show all process even the current process is not associated with any TTY (terminal)<\/p>\n<p><code>ps ax | grep docker<\/code><\/p>\n<\/li>\n<li>\n<p>Watching activity on Linux with watch and tail commands <\/p>\n<p><code>watch \"dmesg | tail -20\"<\/code><\/p>\n<\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "April 14, 2020 06:09 PM",
			"slug": "most-useful-linux-commands",
			"categoryslug": "linux",
			"status": "publised",
			"summary": "\n<ul><li>\n<p><strong>uname<\/strong> command is simple tool which provides information about the kernel, machine, processor, and operating system<\/p>\n<p><code>uname -m<\/code><\/p>\n<\/li>\n<li>\n<p>check ubuntu linux version<\/p>\n<p><code>lsb_release -a<\/code><\/p>\n<\/li>\n<li>\n<p>show the amount of free disk...<\/p><\/li><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Restful Services",
			"tags": [
				"common"
			],
			"category": "PHP",
			"body": "<p><strong># Why REST<\/strong> <\/p>\n<ol>\n<li>Rest can be fetched from cahced storage instead of always heating to Server<\/li>\n<li>Rest is Stateless.<\/li>\n<li>Rest can work in very low bandwidth<\/li>\n<li>REST request &amp; response can be in  TEXT, XML, HTML and JSON Format.<\/li>\n<li>REST is an architectural pattern not a protocal.<\/li>\n<li>REST can make use of SOAP services.<\/li>\n<li>Challenges in Rest - Lack of Security &amp; Lack of state<\/li>\n<\/ol>\n<p><strong># Methods:<\/strong><\/p>\n<ol>\n<li>\n<p>GET<\/p>\n<ul>\n<li>This method is like calling a uri with query parameters.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p>POST<\/p>\n<ul>\n<li>Not idempotent method, used to <strong>create<\/strong> records in DB<\/li>\n<li>Since record does not exits before, save url and return url is different.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p>PUT<\/p>\n<ul>\n<li>This method is idempotent. means client and server urls are same.<\/li>\n<li>Used for updating a resource by using the primary key.<\/li>\n<li>This method specifiy to fully update the db record with the variables.<\/li>\n<li>When the the url with primary key is not valid, the record is auto generated in database.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p>PATCH<\/p>\n<ul>\n<li>This method is idempotent. means client and server urls are same.<\/li>\n<li>Used for updating a resource by using the primary key.<\/li>\n<li>This method specifiy to partially update the db record.<\/li>\n<li>When the the url with primary key is not valid, the record is auto generated in database.<\/li>\n<\/ul>\n<\/li>\n<li>DELETE\n<ul>\n<li>This method in REST is used to destroy the resource. <\/li>\n<li>Destroyed resource are not called again To DELETE the resource <\/li>\n<\/ul><\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "April 14, 2020 05:53 PM",
			"slug": "restful-services",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p><strong># Why REST<\/strong> <\/p>\n<ol><li>Rest can be fetched from cahced storage instead of always heating to Server<\/li>\n<li>Rest is Stateless.<\/li>\n<li>Rest can work in very low bandwidth<\/li>\n<li>REST request &amp; response can be in  TEXT, XML, HTML and JSON Format.<\/li>\n<li>REST is an archi...<\/li><\/ol>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Upload Large Files to server using script",
			"tags": [
				"Javascript",
				"PHP"
			],
			"category": "Javascript",
			"body": "<p><strong>Steps<\/strong><\/p>\n<ol>\n<li>\n<p>Choose a javascript plugin which devide the binary data into equal multiple chunks from client.<\/p>\n<\/li>\n<li>\n<p>Pass to server each chunk of binary data with file information. ex. mdf5 name, total chunks, processed chunk in each ajax request one by one to write\/append  in same file on server.<\/p>\n<\/li>\n<li>when the total chunks and chunk count in ajax request is same, then file appending\/uploading will complete in server, returning a message to clinet.<\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "April 14, 2020 05:51 PM",
			"slug": "upload-large-files-to-server-using-script",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p><strong>Steps<\/strong><\/p>\n<ol>\n<li>\n<p>Choose a javascript plugin which devide the binary data into equal multiple chunks from client.<\/p>\n<\/li>\n<li>\n<p>Pass to server each chunk of binary data with file information. ex. mdf5 name, total chunks, processed chunk in each ajax request one by one to...<\/p><\/li><\/ol>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Optimising MySQL Query",
			"tags": [
				"MySQL"
			],
			"category": "Database",
			"body": "<p><strong>Steps<\/strong><\/p>\n<ol>\n<li>Expain in select query will produce the number of comparison done, look at the column to assign indexing to column<\/li>\n<li>Remove generalised statements, instead specifiy the required columns<\/li>\n<li>Remove in() and not In() from where clause rather use =. !=<\/li>\n<li>Never use subquery if possible, rather to use join<\/li>\n<li>De-normalize when not necessary to devide tables futher on basis of normalisation.<\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "April 14, 2020 05:50 PM",
			"slug": "optimising-mysql-query",
			"categoryslug": "database",
			"status": "publised",
			"summary": "\n<p><strong>Steps<\/strong><\/p>\n<ol><li>Expain in select query will produce the number of comparison done, look at the column to assign indexing to column<\/li>\n<li>Remove generalised statements, instead specifiy the required columns<\/li>\n<li>Remove in() and not In() from where clause rather use =. !=...<\/li><\/ol>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Supervisor & Crontabs",
			"tags": [
				"command"
			],
			"category": "Linux",
			"body": "<p><strong>Supervisor (Running Program as a process)<\/strong><\/p>\n<p>When commad stops after closing the shell terminal, Supervisor takes care to run the command in background as process, Whenever required the process can be killed on shell.<\/p>\n<p>Steps to run the angular development server in background<\/p>\n<ol>\n<li>sudo apt-get install supervisor<\/li>\n<li>vim \/etc\/supervisor\/conf.d\/ngServe.conf<\/li>\n<li>supervisorctl<\/li>\n<li>vim \/var\/log\/ngServe.out.log<\/li>\n<li>tail -f \/var\/log\/ngServe.out.log<\/li>\n<li>ps ax | grep PID(4098)<\/li>\n<\/ol>\n<p><strong>inside the file &quot;ngServe.conf&quot;<\/strong><\/p>\n<ol>\n<li>[program:ngServe]<\/li>\n<li>command=cd \/var\/www\/html\/ng &amp;&amp; ng serve --port=8088<\/li>\n<li>autostart=true<\/li>\n<li>autorestart=true<\/li>\n<li>stderr_logfil=\/var\/log\/ngServe.out.log<\/li>\n<li>stdout_logfile=\/var\/log\/ngServe.out.log<\/li>\n<\/ol>\n<hr \/>\n<p><strong>Crontab examples<\/strong><\/p>\n<ol>\n<li>crontab -e<\/li>\n<li>Examples\n<ul>\n<li>0 5 <em> <\/em> 1 tar -zcf \/var\/backups\/home.tgz \/home\/<\/li>\n<li>0 5 <em> <\/em> 1 php  \/var\/www\/html\/run.php<\/li>\n<li>0 5 <em> <\/em> 1 php  php artisan comission:monthly<\/li>\n<\/ul><\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "April 14, 2020 05:49 PM",
			"slug": "supervisor-crontabs",
			"categoryslug": "linux",
			"status": "publised",
			"summary": "\n<p><strong>Supervisor (Running Program as a process)<\/strong><\/p>\n<p>When commad stops after closing the shell terminal, Supervisor takes care to run the command in background as process, Whenever required the process can be killed on shell.<\/p>\n<p>Steps to run the angular development server in back...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Design Patterns",
			"tags": [
				"common"
			],
			"category": "Design Patterns",
			"body": "<p>In software engineering, a design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design.<\/p>\n<p><strong>Some Of Design Patterns:<\/strong><\/p>\n<p><strong>Singleton<\/strong><\/p>\n<ul>\n<li>Whenever only dingle instance of a object is required through out the system<\/li>\n<li>Example  DB connection &amp; Logger writing Object.<\/li>\n<li>In Angular, any services with @injectable() are singleton always. <\/li>\n<\/ul>\n<p><strong>Facade<\/strong><\/p>\n<ul>\n<li>A facade is an object that serves as a front-facing interface masking more complex underlying or structural code<\/li>\n<li>Provide a unified interface to a set of interfaces in a subsystem.<\/li>\n<li>Facade deals with interfaces, not implementation. Its purpose is to hide internal complexity behind a single interface that appears simple on the outside.<\/li>\n<\/ul>\n<p><strong>Adaptor<\/strong><\/p>\n<ul>\n<li>The Adapter pattern allows otherwise incompatible classes to work together by converting the interface of one class into an interface expected by the clients<\/li>\n<li>It allows two or more previously incompatible objects to interact.<\/li>\n<li>It allows reusability of existing functionality.<\/li>\n<li>For example, sharing post in diferent social medias like fb,tweet,linkedin can be done using one interface implements the common methods in different classes of social media to share the data. <\/li>\n<\/ul>\n<p><strong>Observable<\/strong><\/p>\n<ul>\n<li>An Observer Pattern says that &quot;just define a one-to-one dependency so that when one object changes state, all its dependents are notified and updated automatically&quot;.<\/li>\n<li>It describes the coupling between the objects and the observer.<\/li>\n<li>It provides the support for broadcast-type communication.<\/li>\n<li>When the change of a state in one object must be reflected in another object without keeping the objects tight coupled.<\/li>\n<\/ul>\n<p><strong>Proxy<\/strong><\/p>\n<ul>\n<li>Simply, proxy means an object representing another object<\/li>\n<li>It provides the protection to the original object from the outside world.<\/li>\n<li>So, we can perform many operations like hiding the information of original object, on demand loading etc.<\/li>\n<li>A proxy, in its most general form, is a class functioning as an interface to something else.<\/li>\n<li>In proxy pattern, we create object having original object to interface its functionality to outer world.<\/li>\n<\/ul>\n<p><strong>Front Controller<\/strong><\/p>\n<ul>\n<li>Where single entry point like index.php, index.html inframeworks<\/li>\n<\/ul>\n<p><strong>Factory<\/strong><\/p>\n<ul>\n<li>Factory pattern helps in instantiation and creation of Objects<\/li>\n<li>According to definition from wikipedia, Factory Pattern is &quot;A factory is an object for creating other objects&quot;<\/li>\n<li>In simple factory pattern, we have a factory class which has a method that returns different types of object based on given input<\/li>\n<li>For an example a Factory produces different type of fans, and all type of fan are kept for Testing, instead of swtiching on \/ off each fan, a factory function should be generated which will test the fan by passing the type of fan, no need to go detail to check how fans are switched off and switched on. It is kind of abstracting the deail functionality of various fans(table fan, ceiling fan, powered fan, wall fan).<\/li>\n<li>In this pattern, a class simply creates the object you want to use. Consider the following example of the factory pattern:<\/li>\n<\/ul>\n<pre>\n<code>\nclass Automobile\n{\n    private $vehicleMake;\n    private $vehicleModel;\n\n    public function __construct($make, $model)\n    {\n        $this->vehicleMake = $make;\n        $this->vehicleModel = $model;\n    }\n\n    public function getMakeAndModel()\n    {\n        return $this->vehicleMake . ' ' . $this->vehicleModel;\n    }\n}\n\nclass AutomobileFactory\n{\n    public static function create($make, $model)\n    {\n        return new Automobile($make, $model);\n    }\n}\n\n\/\/ have the factory create the Automobile object\n$veyron = AutomobileFactory::create('Bugatti', 'Veyron');\n\nprint_r($veyron->getMakeAndModel()); \/\/ outputs \"Bugatti Veyron\"\n\n<\/code>\n<\/pre>\n<p><strong>Strategy Pattern<\/strong><\/p>\n<ul>\n<li>With the strategy pattern you encapsulate specific families of algorithms allowing the client class responsible for instantiating a particular algorithm to have no knowledge of the actual implementation. This first code snippet outlines a family of algorithms; you may want a serialized array, some JSON or maybe just an array of data<\/li>\n<\/ul>\n<pre>\n<code>\ninterface OutputInterface\n{\n    public function load();\n}\n\nclass SerializedArrayOutput implements OutputInterface\n{\n    public function load()\n    {\n        return serialize($arrayOfData);\n    }\n}\n\nclass JsonStringOutput implements OutputInterface\n{\n    public function load()\n    {\n        return json_encode($arrayOfData);\n    }\n}\n\nclass ArrayOutput implements OutputInterface\n{\n    public function load()\n    {\n        return $arrayOfData;\n    }\n}\n\nclass SomeClient\n{\n    private $output;\n\n    public function setOutput(OutputInterface $outputType)\n    {\n        $this->output = $outputType;\n    }\n\n    public function loadOutput()\n    {\n        return $this->output->load();\n    }\n}\n\n\/\/ Want some JSON?\n$client->setOutput(new JsonStringOutput());\n$data = $client->loadOutput();\n<\/code>\n<\/pre>",
			"addpost": "addpost",
			"dated": "April 14, 2020 05:46 PM",
			"slug": "design-patterns",
			"categoryslug": "design-patterns",
			"status": "publised",
			"summary": "\n<p>In software engineering, a design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design.<\/p>\n<p><strong>Some Of Design Patterns:<\/strong><\/p>\n<p><strong>Singleton<\/strong><\/p>\n<ul><li>Whenever only dingle instance of a object is require...<\/li><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "Optimising PHP Scripts",
			"tags": [
				"common"
			],
			"category": "PHP",
			"body": "<p><em>Mainly to avoid generalised coding for better usage of memory and time, use specific and proper logic, statement, inbuilt function.<\/em><\/p>\n<ol>\n<li>Take advantage of native php function<\/li>\n<li>Cut out unnecessary classes<\/li>\n<li>Turn off debugging notification<\/li>\n<li>close file and databse connections<\/li>\n<li>unnessary loop needs to breaked. unsetting memories after usages of variable and object.<\/li>\n<li>Use single quote rather double quote<\/li>\n<li>use identify operator ===<\/li>\n<li>use proper string function<\/li>\n<li>calculate only once<\/li>\n<li>Pass reference to the function to use the veriable outside the function<\/li>\n<li>Reduce number of hits to the database<\/li>\n<li>Use intermidate caching technology rather processing same thing again<\/li>\n<li>Use derived methods instead of base methods in class<\/li>\n<li>use json rather XML for data interchange<\/li>\n<li>use isset() always rather using variables directly<\/li>\n<\/ol>",
			"addpost": "addpost",
			"dated": "April 14, 2020 02:50 PM",
			"slug": "optimising-php-scripts",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p><em>Mainly to avoid generalised coding for better usage of memory and time, use specific and proper logic, statement, inbuilt function.<\/em><\/p>\n<ol><li>Take advantage of native php function<\/li>\n<li>Cut out unnecessary classes<\/li>\n<li>Turn off debugging notification<\/li>\n<li>close file and dat...<\/li><\/ol>\n",
			"prevStatus": "publised",
			"showbody": "1"
		}
	],
	"latestPosts": [
		{
			"author": "Sraban Pahadasingh",
			"title": "Angular Perfomane Optimisation",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>List of performance optimization steps for Angular applications<\/p>\n<h3>1. <strong>Event Coalescing<\/strong>: <code>{ngZoneEventCoalescing: true}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Aggregates multiple events into a single change detection run.<\/li>\n<li><strong>Benefits<\/strong>: Reduces the number of change detection cycles.<\/li>\n<\/ul>\n<h3>2. <strong>Zone.js Optimization<\/strong>: <code>{ngZone: 'noop'}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Disables Zone.js to manage change detection manually.<\/li>\n<li><strong>Benefits<\/strong>: Provides fine-grained control over change detection, reducing unnecessary cycles.<\/li>\n<\/ul>\n<h3>3. <strong>OnPush Change Detection<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Changes the default change detection strategy to <code>OnPush<\/code>, which only checks for changes when input properties change.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Limits change detection to specific component updates, improving performance.<\/p>\n<pre><code class=\"language-typescript\">@Component({\n  selector: 'app-my-component',\n  templateUrl: '.\/my-component.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>4. <strong>Track By Function in ngFor<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses a <code>trackBy<\/code> function in <code>ngFor<\/code> to identify items in a collection by a unique identifier.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Minimizes DOM re-renders by tracking changes more efficiently.<\/p>\n<pre><code class=\"language-html\">&lt;div *ngFor=\"let item of items; trackBy: trackByFn\"&gt;\n  {{item.name}}\n&lt;\/div&gt;<\/code><\/pre>\n<pre><code class=\"language-typescript\">trackByFn(index: number, item: any): number {\n  return item.id; \/\/ unique id corresponding to item\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>5. <strong>Lazy Loading Modules<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Defers loading of modules until they are needed, rather than loading all modules at startup.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces initial load time and improves application performance.<\/p>\n<pre><code class=\"language-typescript\">const routes: Routes = [\n  {\n      path: 'feature',\n      loadChildren: () =&gt; import('.\/feature\/feature.module').then(m =&gt; m.FeatureModule)\n  }\n];<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>6. <strong>Preload Lazy-Loaded Modules<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s <code>PreloadAllModules<\/code> strategy to preload lazy-loaded modules after the initial load.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Balances initial load time with module availability.<\/p>\n<pre><code class=\"language-typescript\">RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>7. <strong>AOT Compilation (Ahead of Time)<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Pre-compiles the application at build time instead of runtime.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces application size and improves startup performance.<\/p>\n<pre><code class=\"language-json\">\"angularCompilerOptions\": {\n  \"enableIvy\": true,\n  \"aot\": true\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>8. <strong>Tree Shaking<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Removes unused code during the build process.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Decreases the size of the final JavaScript bundle, leading to faster load times.<\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n  \"minify\": true,\n  \"removeUnusedDependencies\": true\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>9. <strong>Optimize Image Loading<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses modern image formats (like WebP), lazy loading, and responsive images.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces the load on the network and improves rendering performance.<\/p>\n<pre><code class=\"language-html\">&lt;img src=\"image.webp\" loading=\"lazy\" alt=\"description\"&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>10. <strong>Code Splitting<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Splits the application code into smaller chunks that are loaded on demand.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Improves load times by only loading the necessary code for each route.<\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n  \"splitChunks\": {\n      \"chunks\": \"all\"\n  }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>11. <strong>Use Web Workers<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Offloads heavy computation to background threads.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents blocking the main thread, maintaining a responsive UI.<\/p>\n<pre><code class=\"language-typescript\">if (typeof Worker !== 'undefined') {\n  const worker = new Worker(new URL('.\/app.worker', import.meta.url));\n  worker.onmessage = ({ data }) =&gt; {\n      console.log(`Page received message: ${data}`);\n  };\n  worker.postMessage('hello');\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>12. <strong>Service Worker for Caching<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s service worker to cache application resources for offline access and faster load times.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces network requests and improves load performance.<\/p>\n<pre><code class=\"language-typescript\">import { ServiceWorkerModule } from '@angular\/service-worker';\nimport { environment } from '..\/environments\/environment';\n\nServiceWorkerModule.register('ngsw-worker.js', {\n  enabled: environment.production,\n  registrationStrategy: 'registerWhenStable:30000'\n})<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>13. <strong>Use <code>ng-container<\/code> to Group Elements<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses <code>ng-container<\/code> to avoid unnecessary <code>&lt;div&gt;<\/code> tags and reduce the size of the DOM tree.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Minimizes the number of elements in the DOM, leading to improved rendering performance.<\/p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=\"condition\"&gt;\n  &lt;p&gt;Content&lt;\/p&gt;\n&lt;\/ng-container&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>14. <strong>Throttle or Debounce Event Handlers<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses RxJS operators to limit the frequency of event handling.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces the number of function executions and subsequent change detection runs.<\/p>\n<pre><code class=\"language-typescript\">import { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs\/operators';\n\nfromEvent(document, 'click')\n  .pipe(debounceTime(300))\n  .subscribe((event) =&gt; console.log(event));<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>15. <strong>Memory Leak Prevention<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Ensures subscriptions are properly unsubscribed and components are destroyed cleanly.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents memory leaks, which can degrade performance over time.<\/p>\n<pre><code class=\"language-typescript\">import { Subscription } from 'rxjs';\nlet subscription: Subscription = new Subscription();\n\nngOnDestroy() {\n  subscription.unsubscribe();\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>16. <strong>Avoid Direct DOM Manipulation<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s templating system instead of direct DOM manipulation.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Ensures changes are tracked by Angular's change detection, maintaining application consistency.<\/p>\n<pre><code class=\"language-typescript\">this.renderer.setStyle(element, 'display', 'none');<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>17. <strong>Defer and Async Loading for Scripts<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Loads external scripts with <code>defer<\/code> or <code>async<\/code> attributes.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents blocking the main thread during script loading, improving initial render times.<\/p>\n<pre><code class=\"language-html\">&lt;script src=\"example.js\" defer&gt;&lt;\/script&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>18. <strong>Minimize Use of <code>*ngIf<\/code> and <code>*ngFor<\/code><\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Reduces the use of <code>*ngIf<\/code> and <code>*ngFor<\/code> directives to avoid frequent DOM changes.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Decreases change detection and re-rendering overhead.<\/p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=\"condition\"&gt;\n  &lt;!-- Conditional content here --&gt;\n&lt;\/ng-container&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>19. <strong>Enable Production Mode<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Ensures Angular runs in production mode, which disables development mode checks and optimizations.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces overhead and improves application performance.<\/p>\n<pre><code class=\"language-typescript\">import { enableProdMode } from '@angular\/core';\nimport { environment } from '.\/environments\/environment';\n\nif (environment.production) {\n  enableProdMode();\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>Configure tree shaking in angular app<\/h3>\n<p>Tree shaking is an optimization technique used to eliminate dead code (unused code) from a JavaScript bundle. In Angular applications, tree shaking is handled primarily by the build tool, which is usually Webpack, as part of the Angular CLI's build process. Here\u2019s how you can ensure tree shaking is effectively implemented in your Angular application:<\/p>\n<h3><strong>Key Steps to Ensure Tree Shaking in Angular Applications<\/strong><\/h3>\n<ol>\n<li>\n<p><strong>Ensure Production Mode is Enabled<\/strong><\/p>\n<p>Angular's build process differentiates between development and production builds. Production builds enable optimizations like tree shaking, minification, and Ahead-of-Time (AOT) compilation.<\/p>\n<p><strong>How to Enable:<\/strong><\/p>\n<ul>\n<li>\n<p><strong>Via Command Line<\/strong>:\nRun your build command with the <code>--prod<\/code> flag:<\/p>\n<pre><code class=\"language-bash\">ng build --prod<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>In <code>angular.json<\/code> Configuration<\/strong>:\nEnsure your <code>production<\/code> configuration has <code>optimization<\/code> enabled.<\/p>\n<pre><code class=\"language-json\">\"configurations\": {\n \"production\": {\n     \"optimization\": true,\n     \"outputHashing\": \"all\",\n     \"sourceMap\": false,\n     \"extractCss\": true,\n     \"namedChunks\": false,\n     \"aot\": true,\n     \"extractLicenses\": true,\n     \"vendorChunk\": false,\n     \"buildOptimizer\": true\n }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Use ES6 Module Imports<\/strong><\/p>\n<p>Tree shaking works best with ES6 module syntax because the static structure of ES6 imports and exports makes it easier for the build tool to determine which code is used and which isn\u2019t.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-typescript\"> \/\/ Import only the required parts\n import { Component, OnInit } from '@angular\/core';<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Avoid Dynamic <code>require<\/code> Statements<\/strong><\/p>\n<p>Avoid using dynamic <code>require<\/code> statements, as they can prevent tree shaking. Always use static imports.<\/p>\n<p><strong>Good:<\/strong><\/p>\n<pre><code class=\"language-typescript\">import { MyModule } from '.\/path\/to\/module';<\/code><\/pre>\n<p><strong>Bad:<\/strong><\/p>\n<pre><code class=\"language-typescript\">\/\/ Avoid dynamic imports that bring in unnecessary code\nconst MyModule = require('.\/path\/to\/module');\nconst Component = require('@angular\/core').Component;\n\n\/\/ Sometime\n  import('large-module').then(module =&gt; {\n    module.someFunction();\n  });<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Optimize Angular CLI Configuration (<code>angular.json<\/code>)<\/strong><\/p>\n<p>Ensure your <code>angular.json<\/code> file is set up to take advantage of the Angular CLI's optimizations.<\/p>\n<p><strong>Configuration Snippet:<\/strong><\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n   \"scripts\": true,\n   \"styles\": true,\n   \"fonts\": true\n},\n\"buildOptimizer\": true,<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Minimize Polyfills<\/strong><\/p>\n<p>Polyfills can add significant bloat to your application if not carefully managed. Only include necessary polyfills.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<ul>\n<li>Remove unnecessary polyfills from <code>polyfills.ts<\/code>.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Use <code>sideEffects<\/code> in <code>package.json<\/code><\/strong><\/p>\n<p>Specify that your code is side-effect free to help Webpack in identifying and eliminating dead code. The <code>sideEffects<\/code> field in <code>package.json<\/code> indicates which files are safe to prune.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-json\">{\n   \"name\": \"your-app\",\n   \"version\": \"1.0.0\",\n   \"sideEffects\": false\n}<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Use Angular CLI's Tree Shakable Libraries<\/strong><\/p>\n<p>Angular CLI supports tree-shakable libraries. Ensure the libraries you use are designed to support tree shaking by checking their <code>package.json<\/code> for proper module fields like <code>es2015<\/code>, <code>module<\/code>, or <code>esnext<\/code>.<\/p>\n<\/li>\n<li>\n<p><strong>Optimize Third-Party Library Imports<\/strong><\/p>\n<p>Import only what you need from third-party libraries instead of the entire library.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-typescript\">\/\/ Good: Import only required parts\nimport { debounceTime } from 'rxjs\/operators';\n\n\/\/ Bad: Import the whole library\nimport * as _ from 'lodash';<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Use AOT Compilation<\/strong><\/p>\n<p>AOT compilation precompiles the Angular application before the browser downloads and runs it. This helps reduce the bundle size and improve the runtime performance, indirectly aiding tree shaking.<\/p>\n<p><strong>How to Enable:<\/strong><\/p>\n<ul>\n<li>\n<p><strong>Via Command Line<\/strong>:<\/p>\n<pre><code class=\"language-bash\">ng build --aot<\/code><\/pre>\n<\/li>\n<li><strong>In <code>angular.json<\/code><\/strong>:\n<pre><code class=\"language-json\">\"aot\": true<\/code><\/pre><\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Review Webpack Configuration (Advanced)<\/strong><\/p>\n<p>Although Angular CLI abstracts Webpack configuration, advanced users might want to review and adjust Webpack settings directly to ensure tree shaking is optimized.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<ul>\n<li>\n<p>Custom Webpack configuration through Angular CLI builders like <code>@angular-builders\/custom-webpack<\/code>.<\/p>\n<pre><code class=\"language-json\">\"architect\": {\n  \"build\": {\n      \"builder\": \"@angular-builders\/custom-webpack:browser\",\n      \"options\": {\n          \"customWebpackConfig\": {\n              \"path\": \".\/extra-webpack.config.js\"\n          },\n          \/\/ other options...\n      }\n  }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Monitor and Analyze Bundle Size<\/strong><\/p>\n<p>Regularly analyze your bundle size to ensure tree shaking is effectively reducing the application size. Tools like <code>source-map-explorer<\/code> or <code>webpack-bundle-analyzer<\/code> can be used for this purpose.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-bash\">  npm install -g source-map-explorer\n  source-map-explorer dist\/your-app\/main.*.js<\/code><\/pre>\n<\/li>\n<\/ol>\n<h3>Summary<\/h3>\n<p>To ensure effective tree shaking in your Angular application:<\/p>\n<ol>\n<li><strong>Enable Production Mode<\/strong> in your build configuration.<\/li>\n<li><strong>Use ES6 Module Imports<\/strong> and avoid dynamic requires.<\/li>\n<li><strong>Optimize Angular CLI Configuration<\/strong> for tree shaking.<\/li>\n<li><strong>Minimize Polyfills<\/strong> and specify side effects in <code>package.json<\/code>.<\/li>\n<li><strong>Leverage Tree Shakable Libraries<\/strong> and optimize third-party imports.<\/li>\n<li><strong>Utilize AOT Compilation<\/strong> for pre-compilation benefits.<\/li>\n<li><strong>Analyze Bundle Size<\/strong> to verify the effectiveness of tree shaking.<\/li>\n<\/ol>\n<p>By following these steps, you can significantly reduce your application's bundle size, leading to faster load times and better performance.<\/p>\n<h3>Conclusion<\/h3>\n<p>Applying these performance optimization steps can significantly enhance the responsiveness, efficiency, and overall user experience of an Angular application. Each step targets specific aspects of application performance, from initial load times to runtime efficiency and resource management.<\/p>",
			"addpost": "addpost",
			"dated": "June 24, 2024 11:07 AM",
			"slug": "angular-perfomane-optimisation",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>List of performance optimization steps for Angular applications<\/p>\n<h3>1. <strong>Event Coalescing<\/strong>: <code>{ngZoneEventCoalescing: true}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Aggregates multiple events into a single change detection run.<\/li>\n<li><strong>Benefits<\/strong>: R...<\/li><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "ES6 Features",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>Below is a comprehensive list of these features:\nES6 = ECMAScript 2015<\/p>\n<h3>1. <strong>Arrow Functions<\/strong><\/h3>\n<ul>\n<li>Syntactic sugar for anonymous functions with a concise syntax.<\/li>\n<li>\n<p>Does not have its own <code>this<\/code> context, which is lexically scoped.<\/p>\n<pre><code class=\"language-javascript\">const add = (a, b) =&gt; a + b;<\/code><\/pre>\n<h3>2. <strong>Block-Scoped Variables: <code>let<\/code> and <code>const<\/code><\/strong><\/h3>\n<\/li>\n<li><code>let<\/code>: Allows block-scoped variables.<\/li>\n<li>\n<p><code>const<\/code>: Declares block-scoped constants that cannot be reassigned.<\/p>\n<pre><code class=\"language-javascript\">  let variable = \"mutable\";\n  const constant = \"immutable\";<\/code><\/pre>\n<h3>3. <strong>Default Parameters<\/strong><\/h3>\n<\/li>\n<li>\n<p>Allows function parameters to have default values.<\/p>\n<pre><code class=\"language-javascript\">function greet(name = \"World\") {\n    return `Hello, ${name}`;\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>4. <strong>Template Literals<\/strong><\/h3>\n<ul>\n<li>\n<p>Multi-line strings and string interpolation using backticks (`).<\/p>\n<pre><code class=\"language-javascript\">const name = \"John\";\nconst greeting = `Hello, ${name}!`;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>5. <strong>Destructuring Assignment<\/strong><\/h3>\n<ul>\n<li>\n<p>Extract values from arrays or properties from objects into distinct variables.<\/p>\n<pre><code class=\"language-javascript\">const [x, y] = [1, 2];\nconst { name, age } = { name: \"Alice\", age: 25 };<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>6. <strong>Rest and Spread Operators<\/strong><\/h3>\n<ul>\n<li><code>Rest<\/code>: Collects arguments into an array.<\/li>\n<li>\n<p><code>Spread<\/code>: Expands elements of an array or object.<\/p>\n<pre><code class=\"language-javascript\">const sum = (...args) =&gt; args.reduce((a, b) =&gt; a + b, 0); \/\/ Rest\nconst arr = [1, 2, 3];\nconst newArr = [...arr, 4, 5]; \/\/ Spread<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>7. <strong>Enhanced Object Literals<\/strong><\/h3>\n<ul>\n<li>\n<p>Shorthand property names, method definitions, and computed property names.<\/p>\n<pre><code class=\"language-javascript\">const name = \"Alice\";\nconst person = {\n  name,\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  },\n};<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>8. <strong>Classes<\/strong><\/h3>\n<ul>\n<li>\n<p>Syntactic sugar for creating objects and handling inheritance.<\/p>\n<pre><code class=\"language-javascript\">class Person {\n  constructor(name) {\n    this.name = name;\n  }\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>9. <strong>Modules (import\/export)<\/strong><\/h3>\n<ul>\n<li>\n<p>Official support for module loading with <code>import<\/code> and <code>export<\/code> keywords.<\/p>\n<pre><code class=\"language-javascript\">\/\/ module.js\nexport const name = \"Alice\";\n\n\/\/ main.js\nimport { name } from '.\/module.js';<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>10. <strong>Promises<\/strong><\/h3>\n<ul>\n<li>\n<p>Asynchronous operations management with <code>then<\/code>, <code>catch<\/code>, and <code>finally<\/code>.<\/p>\n<pre><code class=\"language-javascript\">const promise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; resolve(\"Done\"), 1000);\n});\n\npromise.then(result =&gt; console.log(result));<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>11. <strong>Block-Scoped Functions<\/strong><\/h3>\n<ul>\n<li>\n<p>Functions defined in a block are scoped to that block.<\/p>\n<pre><code class=\"language-javascript\">if (true) {\n  function sayHi() {\n    console.log(\"Hi\");\n  }\n  sayHi();\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>12. <strong>Generators<\/strong><\/h3>\n<ul>\n<li>\n<p>Functions that can be paused and resumed, maintaining their own state.<\/p>\n<pre><code class=\"language-javascript\">function* generator() {\nyield 1;\nyield 2;\nreturn 3;\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>13. <strong>New Built-in Methods<\/strong><\/h3>\n<ul>\n<li>\n<p>New methods for various objects like <code>Array<\/code>, <code>String<\/code>, <code>Object<\/code>, etc.<\/p>\n<pre><code class=\"language-javascript\">const str = \"hello\";\nstr.includes(\"e\"); \/\/ true\n\nconst arr = Array.from(\"hello\");<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>14. <strong>New Collections: Map, Set, WeakMap, WeakSet<\/strong><\/h3>\n<ul>\n<li><code>Map<\/code>: Key-value pairs.<\/li>\n<li><code>Set<\/code>: Unique values.<\/li>\n<li>\n<p><code>WeakMap<\/code> and <code>WeakSet<\/code>: Garbage-collection friendly collections.<\/p>\n<pre><code class=\"language-javascript\">const map = new Map();\nmap.set('key', 'value');\n\nconst set = new Set([1, 2, 2, 3]);<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>15. <strong>for...of Loop<\/strong><\/h3>\n<ul>\n<li>\n<p>Iterates over iterable objects like arrays, strings, etc.<\/p>\n<pre><code class=\"language-javascript\">for (const item of [1, 2, 3]) {\n  console.log(item);\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>16. <strong>Binary and Octal Literals<\/strong><\/h3>\n<ul>\n<li>\n<p>Literal notations for binary (<code>0b<\/code>) and octal (<code>0o<\/code>) numbers.<\/p>\n<pre><code class=\"language-javascript\">const binary = 0b1010;\nconst octal = 0o755;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>17. <strong>New Target Meta-Property<\/strong><\/h3>\n<ul>\n<li>\n<p>Provides a reference to the target of a function call.<\/p>\n<pre><code class=\"language-javascript\">class Parent {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\n\nclass Child extends Parent {\n  constructor() {\n    super();\n  }\n}\n\nnew Child(); \/\/ logs \"Child\"<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>18. <strong>New Math, Number, String, Object Methods<\/strong><\/h3>\n<ul>\n<li>\n<p>New methods for mathematical computations, number checking, string manipulation, and object handling.<\/p>\n<pre><code class=\"language-javascript\">Number.isFinite(42); \/\/ true\nMath.trunc(4.9); \/\/ 4\nObject.assign({}, {a: 1}, {b: 2}); \/\/ {a: 1, b: 2}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>19. <strong>Reflect API<\/strong><\/h3>\n<ul>\n<li>\n<p>Provides methods for interceptable JavaScript operations, similar to the proxy handlers.<\/p>\n<pre><code class=\"language-javascript\">const obj = { x: 1 };\nReflect.set(obj, 'x', 2);<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>20. <strong>Proxy API<\/strong><\/h3>\n<ul>\n<li>\n<p>Used to define custom behavior for fundamental operations (e.g., property lookup, assignment).<\/p>\n<pre><code class=\"language-javascript\">const handler = {\n  get: (target, property) =&gt; {\n    return property in target ? target[property] : 42;\n  }\n};\n\nconst proxy = new Proxy({}, handler);\nconsole.log(proxy.foo); \/\/ 42<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>21. <strong>Symbol Type<\/strong><\/h3>\n<ul>\n<li>\n<p>A new primitive type for creating unique identifiers.<\/p>\n<pre><code class=\"language-javascript\">const sym = Symbol(\"identifier\");\nconst obj = { [sym]: \"value\" };<\/code><\/pre>\n<\/li>\n<\/ul>\n<hr \/>\n<h4>In Summary:<\/h4>\n<h5>Arrow functions, let and const, default parameters, template       literals, destructuring assignment, rest and spread operators,       enhanced object literals, classes, modules (import\/export), promises,    block-scoped functions, generators, new built-in methods       (String.prototype.includes, Array.from, etc.), new collections (Map,     Set, WeakMap, WeakSet), for...of loop, binary and octal literals, new    target meta-property, new Math, Number, String, Object methods,       Reflect API, Proxy API, Symbol type.<\/h5>\n<hr \/>\n<ul>\n<li><strong>declaration<\/strong> - let,const<\/li>\n<li><strong>data type(primitive, nonprimitive)<\/strong> - Symbol, binary, octal<\/li>\n<li><strong>operator<\/strong> -&gt; ??, ...<\/li>\n<li><strong>enhanced object literal , template literal<\/strong><\/li>\n<li><strong>conditions\/loop<\/strong> -&gt; (for of loop)<\/li>\n<li><strong>function<\/strong> - blocked scope, default params assignment<\/li>\n<li><strong>generators<\/strong> yeild<\/li>\n<li><strong>class<\/strong> - new.target.name<\/li>\n<li><strong>new methods<\/strong> - String, Number, Array, Object Prototype<\/li>\n<li><strong>new collection<\/strong> - Map, Set, WeekMap, WeekSet<\/li>\n<li><strong>module<\/strong> - export\/import<\/li>\n<li><strong>API<\/strong> - Math, Proxy, Reflect<\/li>\n<\/ul>\n<hr \/>\n<p><img src=\"https:\/\/i.imgur.com\/NaX1CXC.png\" alt=\"medium\" \/><\/p>",
			"savedraft": "savedraft",
			"dated": "June 24, 2024 07:24 AM",
			"slug": "es6-features",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>Below is a comprehensive list of these features:\nES6 = ECMAScript 2015<\/p>\n<h3>1. <strong>Arrow Functions<\/strong><\/h3>\n<ul>\n<li>Syntactic sugar for anonymous functions with a concise syntax.<\/li>\n<li>\n<p>Does not have its own <code>this<\/code> context, which is lexically scoped.<\/p>\n<pre><code c...><\/code><\/pre><\/li><\/ul>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "tsConfig.json configuration details",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>The <code>tsconfig.json<\/code> file is essential for configuring TypeScript projects, providing a wide range of options to control the compilation process. Below is a comprehensive list of <code>tsconfig.json<\/code> properties along with detailed descriptions and examples for each.<\/p>\n<h3>Overall Structure<\/h3>\n<p>A typical <code>tsconfig.json<\/code> file looks like this:<\/p>\n<pre><code>{\n  \"compilerOptions\": {\n    \/\/ Compiler options go here\n  },\n  \"include\": [\n    \/\/ File patterns to include\n  ],\n  \"exclude\": [\n    \/\/ File patterns to exclude\n  ],\n  \"files\": [\n    \/\/ Specific files to include\n  ],\n  \"references\": [\n    \/\/ References to other tsconfig files for project references\n  ],\n  \"extends\": \"path\/to\/base\/tsconfig\",\n  \"typeAcquisition\": {\n    \/\/ Type acquisition options for type definitions\n  },\n  \"compileOnSave\": true,\n  \"tsBuildInfoFile\": \"path\/to\/tsbuildinfo\",\n  \"watchOptions\": {\n    \/\/ Options for the watch mode\n  },\n  \"assumeChangesOnlyAffectDirectDependencies\": true,\n  \"plugins\": [\n    \/\/ Plugins to extend TypeScript functionality\n  ]\n}<\/code><\/pre>\n<h3>Detailed Descriptions<\/h3>\n<h4><code>compilerOptions<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Contains settings that influence the behavior of the TypeScript compiler.<\/li>\n<li><strong>Type<\/strong>: <code>object<\/code><\/li>\n<li>\n<p><strong>Common Properties<\/strong>:<\/p>\n<ul>\n<li>\n<p><strong><code>target<\/code><\/strong>: Specifies the output JavaScript version. Common values are <code>\"ES5\"<\/code>, <code>\"ES6\"<\/code>, <code>\"ES2015\"<\/code>, <code>\"ES2020\"<\/code>, etc.\n<code>{target\": \"ES6\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>module<\/code><\/strong>: Determines the module code generation. Options include <code>\"commonjs\"<\/code>, <code>\"amd\"<\/code>, <code>\"esnext\"<\/code>, etc.\n<code>{\"module\": \"commonjs\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>strict<\/code><\/strong>: Enables all strict type-checking options.\n<code>{\"strict\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>outDir<\/code><\/strong>: Specifies the output directory for compiled files.\n<code>{ \"outDir\": \".\/dist\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>rootDir<\/code><\/strong>: Specifies the root directory of input files.\n<code>{\"rootDir\": \".\/src\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>sourceMap<\/code><\/strong>: Generates corresponding <code>.map<\/code> files for debugging.\n<code>{ \"sourceMap\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>declaration<\/code><\/strong>: Generates corresponding <code>.d.ts<\/code> files for TypeScript definitions.\n<code>{\"declaration\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>moduleResolution<\/code><\/strong>: Specifies the module resolution strategy, such as <code>\"node\"<\/code> or <code>\"classic\"<\/code>.\n<code>{\"moduleResolution\": \"node\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>lib<\/code><\/strong>: Includes standard library files in the compilation.\n<code>{\"lib\": [\"ES6\", \"DOM\"]}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>esModuleInterop<\/code><\/strong>: Enables interoperability between CommonJS and ES modules.\n<code>{\"esModuleInterop\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>jsx<\/code><\/strong>: Specifies the JSX code generation for React. Options are <code>\"preserve\"<\/code>, <code>\"react\"<\/code>, <code>\"react-jsx\"<\/code>, etc.\n<code>{\"jsx\": \"react\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>allowJs<\/code><\/strong>: Allows JavaScript files to be compiled.\n<code>{\"allowJs\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>checkJs<\/code><\/strong>: Type-checks JavaScript files.\n<code>{\"checkJs\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>baseUrl<\/code><\/strong>: Base directory for resolving non-relative module names.\n<code>{\"baseUrl\": \".\/\"}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>paths<\/code><\/strong>: A set of path mappings for module resolution.\n<code>{\"paths\": { \"@app\/*\": [\"src\/app\/*\"] }}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>typeRoots<\/code><\/strong>: Specifies directories containing type definitions.\n<code>{\"typeRoots\": [\".\/node_modules\/@types\"]}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>noEmit<\/code><\/strong>: Disables the emitting of output files.\n<code>{\"noEmit\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>skipLibCheck<\/code><\/strong>: Skips type checking of declaration files.\n<code>{\"skipLibCheck\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>noImplicitAny<\/code><\/strong>: Raises errors on expressions and declarations with an implied <code>any<\/code> type.\n<code>{\"noImplicitAny\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>resolveJsonModule<\/code><\/strong>: Enables importing JSON modules.\n<code>{\"resolveJsonModule\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>emitDecoratorMetadata<\/code><\/strong>: Emits design-type metadata for decorators.\n<code>{\"emitDecoratorMetadata\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>experimentalDecorators<\/code><\/strong>: Enables experimental support for decorators.\n<code>{\"experimentalDecorators\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>incremental<\/code><\/strong>: Enables incremental compilation, which speeds up builds.\n<code>{ \"incremental\": true}<\/code><\/p>\n<\/li>\n<li>\n<p><strong><code>composite<\/code><\/strong>: Enables project compilation.\n<code>{\"composite\": true}<\/code><\/p>\n<\/li>\n<li><strong><code>tsBuildInfoFile<\/code><\/strong>: Specifies the location of the build information file.\n<code>{\"tsBuildInfoFile\": \".\/build\/cache\/tsbuildinfo.json\"}<\/code><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4><code>include<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies an array of file patterns to include in the compilation.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{\"include\": [\"src\/**\/*\", \"tests\/**\/*\"]}<\/code><\/li>\n<\/ul>\n<h4><code>exclude<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies an array of file patterns to exclude from the compilation.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{\"exclude\": [\"node_modules\", \"dist\", \"build\"]}<\/code><\/li>\n<\/ul>\n<h4><code>files<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Lists specific files to include in the compilation, regardless of the <code>include<\/code> and <code>exclude<\/code> settings.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{\"files\": [\"src\/index.ts\", \"src\/globals.d.ts\"]}<\/code><\/li>\n<\/ul>\n<h4><code>references<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies a list of project references, allowing TypeScript projects to depend on other TypeScript projects.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"references\": [ { \"path\": \"..\/common\" }, { \"path\": \"..\/utilities\" } ]}<\/code><\/li>\n<\/ul>\n<h4><code>extends<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Allows the <code>tsconfig.json<\/code> to extend another configuration file.<\/li>\n<li><strong>Type<\/strong>: <code>string<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"extends\": \".\/base\/tsconfig.json\" }<\/code><\/li>\n<\/ul>\n<h4><code>typeAcquisition<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Controls the acquisition of type definitions for JavaScript projects.<\/li>\n<li><strong>Type<\/strong>: <code>object<\/code><\/li>\n<li><strong>Properties<\/strong>:\n<ul>\n<li><strong><code>enable<\/code><\/strong>: Enables type acquisition.\n<code>{ \"enable\": true }<\/code><\/li>\n<li><strong><code>include<\/code><\/strong>: Specifies a list of type definitions to include.\n<code>{ \"include\": [\"jest\", \"lodash\"] }<\/code><\/li>\n<li><strong><code>exclude<\/code><\/strong>: Specifies a list of type definitions to exclude.\n<code>{ \"exclude\": [\"express\"] }<\/code><\/li>\n<\/ul><\/li>\n<\/ul>\n<h4><code>compileOnSave<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: If set to <code>true<\/code>, TypeScript will compile files upon saving in the IDE.<\/li>\n<li><strong>Type<\/strong>: <code>boolean<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"compileOnSave\": true }<\/code><\/li>\n<\/ul>\n<h4><code>tsBuildInfoFile<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies the location of the build information file to store incremental compilation information.<\/li>\n<li><strong>Type<\/strong>: <code>string<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"tsBuildInfoFile\": \".\/build\/cache\/tsbuildinfo.json\" }<\/code><\/li>\n<\/ul>\n<h4><code>watchOptions<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies options for watching files in watch mode.<\/li>\n<li><strong>Type<\/strong>: <code>object<\/code><\/li>\n<li><strong>Properties<\/strong>:\n<ul>\n<li><strong><code>watchFile<\/code><\/strong>: Strategy for watching files.\n<code>{ \"watchFile\": \"useFsEvents\" }<\/code><\/li>\n<li><strong><code>watchDirectory<\/code><\/strong>: Strategy for watching directories.\n<code>{ \"watchDirectory\": \"useFsEvents\" }<\/code><\/li>\n<li><strong><code>fallbackPolling<\/code><\/strong>: Polling strategy for systems where <code>fs.watch<\/code> cannot be used.\n<code>{ \"fallbackPolling\": \"dynamicPriority\" }<\/code><\/li>\n<\/ul><\/li>\n<\/ul>\n<h4><code>assumeChangesOnlyAffectDirectDependencies<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: When set to <code>true<\/code>, TypeScript assumes changes only affect direct dependencies, which can speed up incremental builds.<\/li>\n<li><strong>Type<\/strong>: <code>boolean<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"assumeChangesOnlyAffectDirectDependencies\": true }<\/code><\/li>\n<\/ul>\n<h4><code>plugins<\/code><\/h4>\n<ul>\n<li><strong>Purpose<\/strong>: Specifies a list of plugins that extend TypeScript's functionality.<\/li>\n<li><strong>Type<\/strong>: <code>array<\/code><\/li>\n<li><strong>Example<\/strong>:\n<code>{ \"plugins\": [ { \"name\": \"typescript-tslint-plugin\" }, { \"name\": \"typescript-styled-plugin\" } ] }<\/code><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "June 23, 2024 06:31 PM",
			"slug": "tsconfigjson-configuration-details",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>The <code>tsconfig.json<\/code> file is essential for configuring TypeScript projects, providing a wide range of options to control the compilation process. Below is a comprehensive list of <code>tsconfig.json<\/code> properties along with detailed descriptions and examples for each.<\/p>\n<h3>Overal...<\/h3>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "When does Angular's change detection fail to work properly?",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>Scenarios where Angular's change detection might not work as expected, specifically in projects and library components.<\/p>\n<ol>\n<li>\n<p><strong>Changes in Asynchronous Operations<\/strong>\n<br>you may need to manually trigger change detection using <code>ChangeDetectorRef.detectChanges()<\/code><\/p>\n<\/li>\n<li><strong>Immutable Objects<\/strong>\n<br>An object where its reference does not change, but its internal state does.\nYou should use methods that return new instances when modifying immutable objects (e.g., Array methods like map, filter, etc., or libraries like Immutable.js, a nested object or array).\n<br>ex.\n<pre><code>this.agGridDynamicConfig = {... this.agGridDynamicConfig}<\/code><\/pre><\/li>\n<li>\n<p><strong>Events Outside Angular's Zone<\/strong>\n<br> If events (like DOM events) occur outside Angular's zone. You can use <code>NgZone.run()<\/code> to execute code within Angular's zone.<\/p>\n<\/li>\n<li><strong>Third-Party Libraries<\/strong>\n<br> If you're using third-party libraries that manipulate the DOM directly or change component state outside Angular's knowledge, you may need to wrap these operations in Angular's zone or handle change detection manually<\/li>\n<\/ol>",
			"savedraft": "savedraft",
			"dated": "June 22, 2024 07:23 PM",
			"slug": "when-does-angulars-change-detection-fail-to-work-properly",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>Scenarios where Angular's change detection might not work as expected, specifically in projects and library components.<\/p>\n<ol>\n<li>\n<p><strong>Changes in Asynchronous Operations<\/strong>\n<br>you may need to manually trigger change detection using <code>ChangeDetectorRef.detectChanges()<\/code><\/p><\/li><\/ol>\n",
			"addpost": "addpost",
			"prevStatus": "draft",
			"showbody": "1"
		},
		{
			"author": "Sraban Pahadasingh",
			"title": "package.json configuration",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>The most common fields and configurations found in package.json. Depending on the project's needs and tooling used, some of these configurations may not be present or may have additional custom configurations.<\/p>\n<ol>\n<li>\n<p><strong>name<\/strong>: The name of the package or project.<\/p>\n<\/li>\n<li>\n<p><strong>version<\/strong>: The version of the package or project, following Semantic Versioning (SemVer).<\/p>\n<\/li>\n<li>\n<p><strong>description<\/strong>: A brief description of the package or project.<\/p>\n<\/li>\n<li>\n<p><strong>keywords<\/strong>: An array of keywords that describe the package, useful for search optimization.<\/p>\n<\/li>\n<li>\n<p><strong>homepage<\/strong>: The URL to the project's homepage.<\/p>\n<\/li>\n<li>\n<p><strong>bugs<\/strong>: Information about where to report bugs for the package.<\/p>\n<\/li>\n<li>\n<p><strong>license<\/strong>: The license under which the package is distributed.<\/p>\n<\/li>\n<li>\n<p><strong>author<\/strong>: The name and email address of the package author.<\/p>\n<\/li>\n<li>\n<p><strong>contributors<\/strong>: An array of contributors to the project.<\/p>\n<\/li>\n<li>\n<p><strong>files<\/strong>: An array of files to include in the package.<\/p>\n<\/li>\n<li>\n<p><strong>main<\/strong>: The entry point of the package (the main module that gets executed when the package is required).<\/p>\n<\/li>\n<li>\n<p><strong>browser<\/strong>: Replacement files to use in the browser environment.<\/p>\n<\/li>\n<li>\n<p><strong>bin<\/strong>: Specifies command-line commands that are installed with the package.<\/p>\n<\/li>\n<li>\n<p><strong>scripts<\/strong>: An object where each key is a script name and the value is the command to run for that script.<\/p>\n<\/li>\n<li>\n<p><strong>dependencies<\/strong>: An object listing the packages that the project depends on in production.<\/p>\n<\/li>\n<li>\n<p><strong>devDependencies<\/strong>: An object listing packages that are only needed for development and testing.<\/p>\n<\/li>\n<li>\n<p><strong>peerDependencies<\/strong>: An object listing packages that the project expects the host environment to provide.<\/p>\n<\/li>\n<li>\n<p><strong>optionalDependencies<\/strong>: An object listing packages that are optional dependencies.<\/p>\n<\/li>\n<li>\n<p><strong>engines<\/strong>: Specifies the versions of Node.js and npm that the package is compatible with.<\/p>\n<\/li>\n<li>\n<p><strong>os<\/strong>: An array of operating systems on which the package runs.<\/p>\n<\/li>\n<li>\n<p><strong>cpu<\/strong>: An array of CPUs that the package runs on.<\/p>\n<\/li>\n<li>\n<p><strong>private<\/strong>: If true, prevents the package from being accidentally published to the npm registry.<\/p>\n<\/li>\n<li>\n<p><strong>publishConfig<\/strong>: Configures publishing options when using npm publish.<\/p>\n<\/li>\n<li>\n<p><strong>directories<\/strong>: Specifies a directory structure for the package.<\/p>\n<\/li>\n<li>\n<p><strong>repository<\/strong>: The URL and type of source control repository for the package.<\/p>\n<\/li>\n<li>\n<p><strong>scripts<\/strong>: Custom scripts that can be run with npm, typically used for build, test, and other automation tasks.<\/p>\n<\/li>\n<li>\n<p><strong>config<\/strong>: Configuration parameters that can be used by the scripts.<\/p>\n<\/li>\n<li>\n<p><strong>workspaces<\/strong>: An array of workspace packages that are part of a multi-package repository.<\/p>\n<\/li>\n<li>\n<p><strong>jest<\/strong> (or other test runner configurations): Specific configurations for test runners like Jest.<\/p>\n<\/li>\n<li><strong>eslintConfig<\/strong> (or other linter configurations): Configuration for linters like ESLint.<\/li>\n<\/ol>\n<p>ex.<\/p>\n<pre><code>{\n  \"name\": \"my-node-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A sample Node.js project\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.2\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^27.0.0\"\n  },\n  \"author\": \"Your Name\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https:\/\/github.com\/your-username\/my-node-project.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https:\/\/github.com\/your-username\/my-node-project\/issues\"\n  },\n  \"homepage\": \"https:\/\/github.com\/your-username\/my-node-project#readme\"\n}<\/code><\/pre>",
			"savedraft": "savedraft",
			"dated": "June 22, 2024 06:03 PM",
			"slug": "packagejson-configuration",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>The most common fields and configurations found in package.json. Depending on the project's needs and tooling used, some of these configurations may not be present or may have additional custom configurations.<\/p>\n<ol>\n<li>\n<p><strong>name<\/strong>: The name of the package or project.<\/p>\n<\/li>\n<...><\/...><\/ol>\n",
			"addpost": "addpost",
			"prevStatus": "draft",
			"showbody": "1"
		}
	],
	"homePosts": [
		{
			"author": "Sraban Pahadasingh",
			"title": "Angular Perfomane Optimisation",
			"tags": [
				"Javascript"
			],
			"category": "Javascript",
			"body": "<p>List of performance optimization steps for Angular applications<\/p>\n<h3>1. <strong>Event Coalescing<\/strong>: <code>{ngZoneEventCoalescing: true}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Aggregates multiple events into a single change detection run.<\/li>\n<li><strong>Benefits<\/strong>: Reduces the number of change detection cycles.<\/li>\n<\/ul>\n<h3>2. <strong>Zone.js Optimization<\/strong>: <code>{ngZone: 'noop'}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Disables Zone.js to manage change detection manually.<\/li>\n<li><strong>Benefits<\/strong>: Provides fine-grained control over change detection, reducing unnecessary cycles.<\/li>\n<\/ul>\n<h3>3. <strong>OnPush Change Detection<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Changes the default change detection strategy to <code>OnPush<\/code>, which only checks for changes when input properties change.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Limits change detection to specific component updates, improving performance.<\/p>\n<pre><code class=\"language-typescript\">@Component({\n  selector: 'app-my-component',\n  templateUrl: '.\/my-component.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>4. <strong>Track By Function in ngFor<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses a <code>trackBy<\/code> function in <code>ngFor<\/code> to identify items in a collection by a unique identifier.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Minimizes DOM re-renders by tracking changes more efficiently.<\/p>\n<pre><code class=\"language-html\">&lt;div *ngFor=\"let item of items; trackBy: trackByFn\"&gt;\n  {{item.name}}\n&lt;\/div&gt;<\/code><\/pre>\n<pre><code class=\"language-typescript\">trackByFn(index: number, item: any): number {\n  return item.id; \/\/ unique id corresponding to item\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>5. <strong>Lazy Loading Modules<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Defers loading of modules until they are needed, rather than loading all modules at startup.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces initial load time and improves application performance.<\/p>\n<pre><code class=\"language-typescript\">const routes: Routes = [\n  {\n      path: 'feature',\n      loadChildren: () =&gt; import('.\/feature\/feature.module').then(m =&gt; m.FeatureModule)\n  }\n];<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>6. <strong>Preload Lazy-Loaded Modules<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s <code>PreloadAllModules<\/code> strategy to preload lazy-loaded modules after the initial load.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Balances initial load time with module availability.<\/p>\n<pre><code class=\"language-typescript\">RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>7. <strong>AOT Compilation (Ahead of Time)<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Pre-compiles the application at build time instead of runtime.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces application size and improves startup performance.<\/p>\n<pre><code class=\"language-json\">\"angularCompilerOptions\": {\n  \"enableIvy\": true,\n  \"aot\": true\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>8. <strong>Tree Shaking<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Removes unused code during the build process.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Decreases the size of the final JavaScript bundle, leading to faster load times.<\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n  \"minify\": true,\n  \"removeUnusedDependencies\": true\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>9. <strong>Optimize Image Loading<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses modern image formats (like WebP), lazy loading, and responsive images.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces the load on the network and improves rendering performance.<\/p>\n<pre><code class=\"language-html\">&lt;img src=\"image.webp\" loading=\"lazy\" alt=\"description\"&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>10. <strong>Code Splitting<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Splits the application code into smaller chunks that are loaded on demand.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Improves load times by only loading the necessary code for each route.<\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n  \"splitChunks\": {\n      \"chunks\": \"all\"\n  }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>11. <strong>Use Web Workers<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Offloads heavy computation to background threads.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents blocking the main thread, maintaining a responsive UI.<\/p>\n<pre><code class=\"language-typescript\">if (typeof Worker !== 'undefined') {\n  const worker = new Worker(new URL('.\/app.worker', import.meta.url));\n  worker.onmessage = ({ data }) =&gt; {\n      console.log(`Page received message: ${data}`);\n  };\n  worker.postMessage('hello');\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>12. <strong>Service Worker for Caching<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s service worker to cache application resources for offline access and faster load times.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces network requests and improves load performance.<\/p>\n<pre><code class=\"language-typescript\">import { ServiceWorkerModule } from '@angular\/service-worker';\nimport { environment } from '..\/environments\/environment';\n\nServiceWorkerModule.register('ngsw-worker.js', {\n  enabled: environment.production,\n  registrationStrategy: 'registerWhenStable:30000'\n})<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>13. <strong>Use <code>ng-container<\/code> to Group Elements<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses <code>ng-container<\/code> to avoid unnecessary <code>&lt;div&gt;<\/code> tags and reduce the size of the DOM tree.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Minimizes the number of elements in the DOM, leading to improved rendering performance.<\/p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=\"condition\"&gt;\n  &lt;p&gt;Content&lt;\/p&gt;\n&lt;\/ng-container&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>14. <strong>Throttle or Debounce Event Handlers<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses RxJS operators to limit the frequency of event handling.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces the number of function executions and subsequent change detection runs.<\/p>\n<pre><code class=\"language-typescript\">import { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs\/operators';\n\nfromEvent(document, 'click')\n  .pipe(debounceTime(300))\n  .subscribe((event) =&gt; console.log(event));<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>15. <strong>Memory Leak Prevention<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Ensures subscriptions are properly unsubscribed and components are destroyed cleanly.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents memory leaks, which can degrade performance over time.<\/p>\n<pre><code class=\"language-typescript\">import { Subscription } from 'rxjs';\nlet subscription: Subscription = new Subscription();\n\nngOnDestroy() {\n  subscription.unsubscribe();\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>16. <strong>Avoid Direct DOM Manipulation<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Uses Angular\u2019s templating system instead of direct DOM manipulation.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Ensures changes are tracked by Angular's change detection, maintaining application consistency.<\/p>\n<pre><code class=\"language-typescript\">this.renderer.setStyle(element, 'display', 'none');<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>17. <strong>Defer and Async Loading for Scripts<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Loads external scripts with <code>defer<\/code> or <code>async<\/code> attributes.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Prevents blocking the main thread during script loading, improving initial render times.<\/p>\n<pre><code class=\"language-html\">&lt;script src=\"example.js\" defer&gt;&lt;\/script&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>18. <strong>Minimize Use of <code>*ngIf<\/code> and <code>*ngFor<\/code><\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Reduces the use of <code>*ngIf<\/code> and <code>*ngFor<\/code> directives to avoid frequent DOM changes.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Decreases change detection and re-rendering overhead.<\/p>\n<pre><code class=\"language-html\">&lt;ng-container *ngIf=\"condition\"&gt;\n  &lt;!-- Conditional content here --&gt;\n&lt;\/ng-container&gt;<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>19. <strong>Enable Production Mode<\/strong><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Ensures Angular runs in production mode, which disables development mode checks and optimizations.<\/li>\n<li>\n<p><strong>Benefits<\/strong>: Reduces overhead and improves application performance.<\/p>\n<pre><code class=\"language-typescript\">import { enableProdMode } from '@angular\/core';\nimport { environment } from '.\/environments\/environment';\n\nif (environment.production) {\n  enableProdMode();\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3>Configure tree shaking in angular app<\/h3>\n<p>Tree shaking is an optimization technique used to eliminate dead code (unused code) from a JavaScript bundle. In Angular applications, tree shaking is handled primarily by the build tool, which is usually Webpack, as part of the Angular CLI's build process. Here\u2019s how you can ensure tree shaking is effectively implemented in your Angular application:<\/p>\n<h3><strong>Key Steps to Ensure Tree Shaking in Angular Applications<\/strong><\/h3>\n<ol>\n<li>\n<p><strong>Ensure Production Mode is Enabled<\/strong><\/p>\n<p>Angular's build process differentiates between development and production builds. Production builds enable optimizations like tree shaking, minification, and Ahead-of-Time (AOT) compilation.<\/p>\n<p><strong>How to Enable:<\/strong><\/p>\n<ul>\n<li>\n<p><strong>Via Command Line<\/strong>:\nRun your build command with the <code>--prod<\/code> flag:<\/p>\n<pre><code class=\"language-bash\">ng build --prod<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>In <code>angular.json<\/code> Configuration<\/strong>:\nEnsure your <code>production<\/code> configuration has <code>optimization<\/code> enabled.<\/p>\n<pre><code class=\"language-json\">\"configurations\": {\n \"production\": {\n     \"optimization\": true,\n     \"outputHashing\": \"all\",\n     \"sourceMap\": false,\n     \"extractCss\": true,\n     \"namedChunks\": false,\n     \"aot\": true,\n     \"extractLicenses\": true,\n     \"vendorChunk\": false,\n     \"buildOptimizer\": true\n }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Use ES6 Module Imports<\/strong><\/p>\n<p>Tree shaking works best with ES6 module syntax because the static structure of ES6 imports and exports makes it easier for the build tool to determine which code is used and which isn\u2019t.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-typescript\"> \/\/ Import only the required parts\n import { Component, OnInit } from '@angular\/core';<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Avoid Dynamic <code>require<\/code> Statements<\/strong><\/p>\n<p>Avoid using dynamic <code>require<\/code> statements, as they can prevent tree shaking. Always use static imports.<\/p>\n<p><strong>Good:<\/strong><\/p>\n<pre><code class=\"language-typescript\">import { MyModule } from '.\/path\/to\/module';<\/code><\/pre>\n<p><strong>Bad:<\/strong><\/p>\n<pre><code class=\"language-typescript\">\/\/ Avoid dynamic imports that bring in unnecessary code\nconst MyModule = require('.\/path\/to\/module');\nconst Component = require('@angular\/core').Component;\n\n\/\/ Sometime\n  import('large-module').then(module =&gt; {\n    module.someFunction();\n  });<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Optimize Angular CLI Configuration (<code>angular.json<\/code>)<\/strong><\/p>\n<p>Ensure your <code>angular.json<\/code> file is set up to take advantage of the Angular CLI's optimizations.<\/p>\n<p><strong>Configuration Snippet:<\/strong><\/p>\n<pre><code class=\"language-json\">\"optimization\": {\n   \"scripts\": true,\n   \"styles\": true,\n   \"fonts\": true\n},\n\"buildOptimizer\": true,<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Minimize Polyfills<\/strong><\/p>\n<p>Polyfills can add significant bloat to your application if not carefully managed. Only include necessary polyfills.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<ul>\n<li>Remove unnecessary polyfills from <code>polyfills.ts<\/code>.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Use <code>sideEffects<\/code> in <code>package.json<\/code><\/strong><\/p>\n<p>Specify that your code is side-effect free to help Webpack in identifying and eliminating dead code. The <code>sideEffects<\/code> field in <code>package.json<\/code> indicates which files are safe to prune.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-json\">{\n   \"name\": \"your-app\",\n   \"version\": \"1.0.0\",\n   \"sideEffects\": false\n}<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Use Angular CLI's Tree Shakable Libraries<\/strong><\/p>\n<p>Angular CLI supports tree-shakable libraries. Ensure the libraries you use are designed to support tree shaking by checking their <code>package.json<\/code> for proper module fields like <code>es2015<\/code>, <code>module<\/code>, or <code>esnext<\/code>.<\/p>\n<\/li>\n<li>\n<p><strong>Optimize Third-Party Library Imports<\/strong><\/p>\n<p>Import only what you need from third-party libraries instead of the entire library.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-typescript\">\/\/ Good: Import only required parts\nimport { debounceTime } from 'rxjs\/operators';\n\n\/\/ Bad: Import the whole library\nimport * as _ from 'lodash';<\/code><\/pre>\n<\/li>\n<li>\n<p><strong>Use AOT Compilation<\/strong><\/p>\n<p>AOT compilation precompiles the Angular application before the browser downloads and runs it. This helps reduce the bundle size and improve the runtime performance, indirectly aiding tree shaking.<\/p>\n<p><strong>How to Enable:<\/strong><\/p>\n<ul>\n<li>\n<p><strong>Via Command Line<\/strong>:<\/p>\n<pre><code class=\"language-bash\">ng build --aot<\/code><\/pre>\n<\/li>\n<li><strong>In <code>angular.json<\/code><\/strong>:\n<pre><code class=\"language-json\">\"aot\": true<\/code><\/pre><\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Review Webpack Configuration (Advanced)<\/strong><\/p>\n<p>Although Angular CLI abstracts Webpack configuration, advanced users might want to review and adjust Webpack settings directly to ensure tree shaking is optimized.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<ul>\n<li>\n<p>Custom Webpack configuration through Angular CLI builders like <code>@angular-builders\/custom-webpack<\/code>.<\/p>\n<pre><code class=\"language-json\">\"architect\": {\n  \"build\": {\n      \"builder\": \"@angular-builders\/custom-webpack:browser\",\n      \"options\": {\n          \"customWebpackConfig\": {\n              \"path\": \".\/extra-webpack.config.js\"\n          },\n          \/\/ other options...\n      }\n  }\n}<\/code><\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Monitor and Analyze Bundle Size<\/strong><\/p>\n<p>Regularly analyze your bundle size to ensure tree shaking is effectively reducing the application size. Tools like <code>source-map-explorer<\/code> or <code>webpack-bundle-analyzer<\/code> can be used for this purpose.<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-bash\">  npm install -g source-map-explorer\n  source-map-explorer dist\/your-app\/main.*.js<\/code><\/pre>\n<\/li>\n<\/ol>\n<h3>Summary<\/h3>\n<p>To ensure effective tree shaking in your Angular application:<\/p>\n<ol>\n<li><strong>Enable Production Mode<\/strong> in your build configuration.<\/li>\n<li><strong>Use ES6 Module Imports<\/strong> and avoid dynamic requires.<\/li>\n<li><strong>Optimize Angular CLI Configuration<\/strong> for tree shaking.<\/li>\n<li><strong>Minimize Polyfills<\/strong> and specify side effects in <code>package.json<\/code>.<\/li>\n<li><strong>Leverage Tree Shakable Libraries<\/strong> and optimize third-party imports.<\/li>\n<li><strong>Utilize AOT Compilation<\/strong> for pre-compilation benefits.<\/li>\n<li><strong>Analyze Bundle Size<\/strong> to verify the effectiveness of tree shaking.<\/li>\n<\/ol>\n<p>By following these steps, you can significantly reduce your application's bundle size, leading to faster load times and better performance.<\/p>\n<h3>Conclusion<\/h3>\n<p>Applying these performance optimization steps can significantly enhance the responsiveness, efficiency, and overall user experience of an Angular application. Each step targets specific aspects of application performance, from initial load times to runtime efficiency and resource management.<\/p>",
			"addpost": "addpost",
			"dated": "June 24, 2024 11:07 AM",
			"slug": "angular-perfomane-optimisation",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "\n<p>List of performance optimization steps for Angular applications<\/p>\n<h3>1. <strong>Event Coalescing<\/strong>: <code>{ngZoneEventCoalescing: true}<\/code><\/h3>\n<ul>\n<li><strong>Description<\/strong>: Aggregates multiple events into a single change detection run.<\/li>\n<li><strong>Benefits<\/strong>: R...<\/li><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		}
	],
	"categories": [
		{
			"category": "Database",
			"categoryslug": "database"
		},
		{
			"category": "Design Patterns",
			"categoryslug": "design-patterns"
		},
		{
			"category": "Javascript",
			"categoryslug": "javascript"
		},
		{
			"category": "Linux",
			"categoryslug": "linux"
		},
		{
			"category": "PHP",
			"categoryslug": "php"
		}
	],
	"tagsCloud": "<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/sraban.github.io\/tag\/command\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">command<\/a>\n<a style=\"font-size: 30px\" class=\"tag_cloud\" href=\"https:\/\/sraban.github.io\/tag\/common\" title=\"6 total posts\" data-original-title=\"7 total posts\" data-toggle=\"tooltip\">common<\/a>\n<a style=\"font-size: 30px\" class=\"tag_cloud\" href=\"https:\/\/sraban.github.io\/tag\/javascript\" title=\"6 total posts\" data-original-title=\"7 total posts\" data-toggle=\"tooltip\">Javascript<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/sraban.github.io\/tag\/mysql\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">MySQL<\/a>\n<a style=\"font-size: 15px\" class=\"tag_cloud\" href=\"https:\/\/sraban.github.io\/tag\/php\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">PHP<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/sraban.github.io\/tag\/server\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">Server<\/a>\n",
	"archives": "<ul class=\"archives list-group\"><li class=\"list-group-item archive_link\"><a href=\"https:\/\/sraban.github.io\/archive\/june-2024\">June 2024<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/sraban.github.io\/archive\/april-2020\">April 2020<\/a><\/li><\/ul>"
}